// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test.proto
// Protobuf Java Version: 4.30.2

package com.github.peterrk.protocache.pb;

/**
 * Protobuf enum {@code test.Mode}
 */
public enum Mode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>MODE_A = 0;</code>
   */
  MODE_A(0),
  /**
   * <code>MODE_B = 1;</code>
   */
  MODE_B(1),
  /**
   * <code>MODE_C = 2;</code>
   */
  MODE_C(2),
  UNRECOGNIZED(-1),
  ;

  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 30,
      /* patch= */ 2,
      /* suffix= */ "",
      Mode.class.getName());
  }
  /**
   * <code>MODE_A = 0;</code>
   */
  public static final int MODE_A_VALUE = 0;
  /**
   * <code>MODE_B = 1;</code>
   */
  public static final int MODE_B_VALUE = 1;
  /**
   * <code>MODE_C = 2;</code>
   */
  public static final int MODE_C_VALUE = 2;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Mode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Mode forNumber(int value) {
    switch (value) {
      case 0: return MODE_A;
      case 1: return MODE_B;
      case 2: return MODE_C;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Mode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Mode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Mode>() {
          public Mode findValueByNumber(int number) {
            return Mode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.github.peterrk.protocache.pb.Test.getDescriptor().getEnumTypes().get(0);
  }

  private static final Mode[] VALUES = values();

  public static Mode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Mode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:test.Mode)
}

