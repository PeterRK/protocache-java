// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test.proto
// Protobuf Java Version: 4.30.2

package com.github.peterrk.protocache.pb;

/**
 * Protobuf type {@code test.Main}
 */
public final class Main extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:test.Main)
    MainOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 30,
      /* patch= */ 2,
      /* suffix= */ "",
      Main.class.getName());
  }
  // Use Main.newBuilder() to construct.
  private Main(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private Main() {
    mode_ = 0;
    str_ = "";
    data_ = com.google.protobuf.ByteString.EMPTY;
    i32V_ = emptyIntList();
    u64V_ = emptyLongList();
    strv_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    datav_ = emptyList(com.google.protobuf.ByteString.class);
    f32V_ = emptyFloatList();
    f64V_ = emptyDoubleList();
    flags_ = emptyBooleanList();
    objectv_ = java.util.Collections.emptyList();
    vector_ = java.util.Collections.emptyList();
    modev_ = emptyIntList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.peterrk.protocache.pb.Test.internal_static_test_Main_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
      int number) {
    switch (number) {
      case 26:
        return internalGetIndex();
      case 27:
        return internalGetObjects();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.peterrk.protocache.pb.Test.internal_static_test_Main_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.peterrk.protocache.pb.Main.class, com.github.peterrk.protocache.pb.Main.Builder.class);
  }

  private int bitField0_;
  public static final int I32_FIELD_NUMBER = 1;
  private int i32_ = 0;
  /**
   * <code>int32 i32 = 1;</code>
   * @return The i32.
   */
  @java.lang.Override
  public int getI32() {
    return i32_;
  }

  public static final int U32_FIELD_NUMBER = 2;
  private int u32_ = 0;
  /**
   * <code>uint32 u32 = 2;</code>
   * @return The u32.
   */
  @java.lang.Override
  public int getU32() {
    return u32_;
  }

  public static final int I64_FIELD_NUMBER = 3;
  private long i64_ = 0L;
  /**
   * <code>int64 i64 = 3;</code>
   * @return The i64.
   */
  @java.lang.Override
  public long getI64() {
    return i64_;
  }

  public static final int U64_FIELD_NUMBER = 4;
  private long u64_ = 0L;
  /**
   * <code>uint64 u64 = 4;</code>
   * @return The u64.
   */
  @java.lang.Override
  public long getU64() {
    return u64_;
  }

  public static final int FLAG_FIELD_NUMBER = 5;
  private boolean flag_ = false;
  /**
   * <code>bool flag = 5;</code>
   * @return The flag.
   */
  @java.lang.Override
  public boolean getFlag() {
    return flag_;
  }

  public static final int MODE_FIELD_NUMBER = 6;
  private int mode_ = 0;
  /**
   * <code>.test.Mode mode = 6;</code>
   * @return The enum numeric value on the wire for mode.
   */
  @java.lang.Override public int getModeValue() {
    return mode_;
  }
  /**
   * <code>.test.Mode mode = 6;</code>
   * @return The mode.
   */
  @java.lang.Override public com.github.peterrk.protocache.pb.Mode getMode() {
    com.github.peterrk.protocache.pb.Mode result = com.github.peterrk.protocache.pb.Mode.forNumber(mode_);
    return result == null ? com.github.peterrk.protocache.pb.Mode.UNRECOGNIZED : result;
  }

  public static final int STR_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private volatile java.lang.Object str_ = "";
  /**
   * <code>string str = 7;</code>
   * @return The str.
   */
  @java.lang.Override
  public java.lang.String getStr() {
    java.lang.Object ref = str_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      str_ = s;
      return s;
    }
  }
  /**
   * <code>string str = 7;</code>
   * @return The bytes for str.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getStrBytes() {
    java.lang.Object ref = str_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      str_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DATA_FIELD_NUMBER = 8;
  private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <code>bytes data = 8;</code>
   * @return The data.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getData() {
    return data_;
  }

  public static final int F32_FIELD_NUMBER = 9;
  private float f32_ = 0F;
  /**
   * <code>float f32 = 9;</code>
   * @return The f32.
   */
  @java.lang.Override
  public float getF32() {
    return f32_;
  }

  public static final int F64_FIELD_NUMBER = 10;
  private double f64_ = 0D;
  /**
   * <code>double f64 = 10;</code>
   * @return The f64.
   */
  @java.lang.Override
  public double getF64() {
    return f64_;
  }

  public static final int OBJECT_FIELD_NUMBER = 11;
  private com.github.peterrk.protocache.pb.Small object_;
  /**
   * <code>.test.Small object = 11;</code>
   * @return Whether the object field is set.
   */
  @java.lang.Override
  public boolean hasObject() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.test.Small object = 11;</code>
   * @return The object.
   */
  @java.lang.Override
  public com.github.peterrk.protocache.pb.Small getObject() {
    return object_ == null ? com.github.peterrk.protocache.pb.Small.getDefaultInstance() : object_;
  }
  /**
   * <code>.test.Small object = 11;</code>
   */
  @java.lang.Override
  public com.github.peterrk.protocache.pb.SmallOrBuilder getObjectOrBuilder() {
    return object_ == null ? com.github.peterrk.protocache.pb.Small.getDefaultInstance() : object_;
  }

  public static final int I32V_FIELD_NUMBER = 12;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList i32V_ =
      emptyIntList();
  /**
   * <code>repeated int32 i32v = 12;</code>
   * @return A list containing the i32v.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getI32VList() {
    return i32V_;
  }
  /**
   * <code>repeated int32 i32v = 12;</code>
   * @return The count of i32v.
   */
  public int getI32VCount() {
    return i32V_.size();
  }
  /**
   * <code>repeated int32 i32v = 12;</code>
   * @param index The index of the element to return.
   * @return The i32v at the given index.
   */
  public int getI32V(int index) {
    return i32V_.getInt(index);
  }
  private int i32VMemoizedSerializedSize = -1;

  public static final int U64V_FIELD_NUMBER = 13;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.LongList u64V_ =
      emptyLongList();
  /**
   * <code>repeated uint64 u64v = 13;</code>
   * @return A list containing the u64v.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long>
      getU64VList() {
    return u64V_;
  }
  /**
   * <code>repeated uint64 u64v = 13;</code>
   * @return The count of u64v.
   */
  public int getU64VCount() {
    return u64V_.size();
  }
  /**
   * <code>repeated uint64 u64v = 13;</code>
   * @param index The index of the element to return.
   * @return The u64v at the given index.
   */
  public long getU64V(int index) {
    return u64V_.getLong(index);
  }
  private int u64VMemoizedSerializedSize = -1;

  public static final int STRV_FIELD_NUMBER = 14;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList strv_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <code>repeated string strv = 14;</code>
   * @return A list containing the strv.
   */
  public com.google.protobuf.ProtocolStringList
      getStrvList() {
    return strv_;
  }
  /**
   * <code>repeated string strv = 14;</code>
   * @return The count of strv.
   */
  public int getStrvCount() {
    return strv_.size();
  }
  /**
   * <code>repeated string strv = 14;</code>
   * @param index The index of the element to return.
   * @return The strv at the given index.
   */
  public java.lang.String getStrv(int index) {
    return strv_.get(index);
  }
  /**
   * <code>repeated string strv = 14;</code>
   * @param index The index of the value to return.
   * @return The bytes of the strv at the given index.
   */
  public com.google.protobuf.ByteString
      getStrvBytes(int index) {
    return strv_.getByteString(index);
  }

  public static final int DATAV_FIELD_NUMBER = 15;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> datav_ =
      emptyList(com.google.protobuf.ByteString.class);
  /**
   * <code>repeated bytes datav = 15;</code>
   * @return A list containing the datav.
   */
  @java.lang.Override
  public java.util.List<com.google.protobuf.ByteString>
      getDatavList() {
    return datav_;
  }
  /**
   * <code>repeated bytes datav = 15;</code>
   * @return The count of datav.
   */
  public int getDatavCount() {
    return datav_.size();
  }
  /**
   * <code>repeated bytes datav = 15;</code>
   * @param index The index of the element to return.
   * @return The datav at the given index.
   */
  public com.google.protobuf.ByteString getDatav(int index) {
    return datav_.get(index);
  }

  public static final int F32V_FIELD_NUMBER = 16;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.FloatList f32V_ =
      emptyFloatList();
  /**
   * <code>repeated float f32v = 16;</code>
   * @return A list containing the f32v.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getF32VList() {
    return f32V_;
  }
  /**
   * <code>repeated float f32v = 16;</code>
   * @return The count of f32v.
   */
  public int getF32VCount() {
    return f32V_.size();
  }
  /**
   * <code>repeated float f32v = 16;</code>
   * @param index The index of the element to return.
   * @return The f32v at the given index.
   */
  public float getF32V(int index) {
    return f32V_.getFloat(index);
  }
  private int f32VMemoizedSerializedSize = -1;

  public static final int F64V_FIELD_NUMBER = 17;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.DoubleList f64V_ =
      emptyDoubleList();
  /**
   * <code>repeated double f64v = 17;</code>
   * @return A list containing the f64v.
   */
  @java.lang.Override
  public java.util.List<java.lang.Double>
      getF64VList() {
    return f64V_;
  }
  /**
   * <code>repeated double f64v = 17;</code>
   * @return The count of f64v.
   */
  public int getF64VCount() {
    return f64V_.size();
  }
  /**
   * <code>repeated double f64v = 17;</code>
   * @param index The index of the element to return.
   * @return The f64v at the given index.
   */
  public double getF64V(int index) {
    return f64V_.getDouble(index);
  }
  private int f64VMemoizedSerializedSize = -1;

  public static final int FLAGS_FIELD_NUMBER = 18;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.BooleanList flags_ =
      emptyBooleanList();
  /**
   * <code>repeated bool flags = 18;</code>
   * @return A list containing the flags.
   */
  @java.lang.Override
  public java.util.List<java.lang.Boolean>
      getFlagsList() {
    return flags_;
  }
  /**
   * <code>repeated bool flags = 18;</code>
   * @return The count of flags.
   */
  public int getFlagsCount() {
    return flags_.size();
  }
  /**
   * <code>repeated bool flags = 18;</code>
   * @param index The index of the element to return.
   * @return The flags at the given index.
   */
  public boolean getFlags(int index) {
    return flags_.getBoolean(index);
  }
  private int flagsMemoizedSerializedSize = -1;

  public static final int OBJECTV_FIELD_NUMBER = 19;
  @SuppressWarnings("serial")
  private java.util.List<com.github.peterrk.protocache.pb.Small> objectv_;
  /**
   * <code>repeated .test.Small objectv = 19;</code>
   */
  @java.lang.Override
  public java.util.List<com.github.peterrk.protocache.pb.Small> getObjectvList() {
    return objectv_;
  }
  /**
   * <code>repeated .test.Small objectv = 19;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.github.peterrk.protocache.pb.SmallOrBuilder> 
      getObjectvOrBuilderList() {
    return objectv_;
  }
  /**
   * <code>repeated .test.Small objectv = 19;</code>
   */
  @java.lang.Override
  public int getObjectvCount() {
    return objectv_.size();
  }
  /**
   * <code>repeated .test.Small objectv = 19;</code>
   */
  @java.lang.Override
  public com.github.peterrk.protocache.pb.Small getObjectv(int index) {
    return objectv_.get(index);
  }
  /**
   * <code>repeated .test.Small objectv = 19;</code>
   */
  @java.lang.Override
  public com.github.peterrk.protocache.pb.SmallOrBuilder getObjectvOrBuilder(
      int index) {
    return objectv_.get(index);
  }

  public static final int T_U32_FIELD_NUMBER = 20;
  private int tU32_ = 0;
  /**
   * <code>fixed32 t_u32 = 20;</code>
   * @return The tU32.
   */
  @java.lang.Override
  public int getTU32() {
    return tU32_;
  }

  public static final int T_I32_FIELD_NUMBER = 21;
  private int tI32_ = 0;
  /**
   * <code>sfixed32 t_i32 = 21;</code>
   * @return The tI32.
   */
  @java.lang.Override
  public int getTI32() {
    return tI32_;
  }

  public static final int T_S32_FIELD_NUMBER = 22;
  private int tS32_ = 0;
  /**
   * <code>sint32 t_s32 = 22;</code>
   * @return The tS32.
   */
  @java.lang.Override
  public int getTS32() {
    return tS32_;
  }

  public static final int T_U64_FIELD_NUMBER = 23;
  private long tU64_ = 0L;
  /**
   * <code>fixed64 t_u64 = 23;</code>
   * @return The tU64.
   */
  @java.lang.Override
  public long getTU64() {
    return tU64_;
  }

  public static final int T_I64_FIELD_NUMBER = 24;
  private long tI64_ = 0L;
  /**
   * <code>sfixed64 t_i64 = 24;</code>
   * @return The tI64.
   */
  @java.lang.Override
  public long getTI64() {
    return tI64_;
  }

  public static final int T_S64_FIELD_NUMBER = 25;
  private long tS64_ = 0L;
  /**
   * <code>sint64 t_s64 = 25;</code>
   * @return The tS64.
   */
  @java.lang.Override
  public long getTS64() {
    return tS64_;
  }

  public static final int INDEX_FIELD_NUMBER = 26;
  private static final class IndexDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.Integer> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.Integer>newDefaultInstance(
                com.github.peterrk.protocache.pb.Test.internal_static_test_Main_IndexEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.INT32,
                0);
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.Integer> index_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
  internalGetIndex() {
    if (index_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          IndexDefaultEntryHolder.defaultEntry);
    }
    return index_;
  }
  public int getIndexCount() {
    return internalGetIndex().getMap().size();
  }
  /**
   * <code>map&lt;string, int32&gt; index = 26;</code>
   */
  @java.lang.Override
  public boolean containsIndex(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetIndex().getMap().containsKey(key);
  }
  /**
   * Use {@link #getIndexMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.Integer> getIndex() {
    return getIndexMap();
  }
  /**
   * <code>map&lt;string, int32&gt; index = 26;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, java.lang.Integer> getIndexMap() {
    return internalGetIndex().getMap();
  }
  /**
   * <code>map&lt;string, int32&gt; index = 26;</code>
   */
  @java.lang.Override
  public int getIndexOrDefault(
      java.lang.String key,
      int defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetIndex().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, int32&gt; index = 26;</code>
   */
  @java.lang.Override
  public int getIndexOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetIndex().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int OBJECTS_FIELD_NUMBER = 27;
  private static final class ObjectsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Integer, com.github.peterrk.protocache.pb.Small> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Integer, com.github.peterrk.protocache.pb.Small>newDefaultInstance(
                com.github.peterrk.protocache.pb.Test.internal_static_test_Main_ObjectsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.INT32,
                0,
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.github.peterrk.protocache.pb.Small.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.Integer, com.github.peterrk.protocache.pb.Small> objects_;
  private com.google.protobuf.MapField<java.lang.Integer, com.github.peterrk.protocache.pb.Small>
  internalGetObjects() {
    if (objects_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ObjectsDefaultEntryHolder.defaultEntry);
    }
    return objects_;
  }
  public int getObjectsCount() {
    return internalGetObjects().getMap().size();
  }
  /**
   * <code>map&lt;int32, .test.Small&gt; objects = 27;</code>
   */
  @java.lang.Override
  public boolean containsObjects(
      int key) {

    return internalGetObjects().getMap().containsKey(key);
  }
  /**
   * Use {@link #getObjectsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Integer, com.github.peterrk.protocache.pb.Small> getObjects() {
    return getObjectsMap();
  }
  /**
   * <code>map&lt;int32, .test.Small&gt; objects = 27;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.Integer, com.github.peterrk.protocache.pb.Small> getObjectsMap() {
    return internalGetObjects().getMap();
  }
  /**
   * <code>map&lt;int32, .test.Small&gt; objects = 27;</code>
   */
  @java.lang.Override
  public /* nullable */
com.github.peterrk.protocache.pb.Small getObjectsOrDefault(
      int key,
      /* nullable */
com.github.peterrk.protocache.pb.Small defaultValue) {

    java.util.Map<java.lang.Integer, com.github.peterrk.protocache.pb.Small> map =
        internalGetObjects().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;int32, .test.Small&gt; objects = 27;</code>
   */
  @java.lang.Override
  public com.github.peterrk.protocache.pb.Small getObjectsOrThrow(
      int key) {

    java.util.Map<java.lang.Integer, com.github.peterrk.protocache.pb.Small> map =
        internalGetObjects().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int MATRIX_FIELD_NUMBER = 28;
  private com.github.peterrk.protocache.pb.Vec2D matrix_;
  /**
   * <code>.test.Vec2D matrix = 28;</code>
   * @return Whether the matrix field is set.
   */
  @java.lang.Override
  public boolean hasMatrix() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>.test.Vec2D matrix = 28;</code>
   * @return The matrix.
   */
  @java.lang.Override
  public com.github.peterrk.protocache.pb.Vec2D getMatrix() {
    return matrix_ == null ? com.github.peterrk.protocache.pb.Vec2D.getDefaultInstance() : matrix_;
  }
  /**
   * <code>.test.Vec2D matrix = 28;</code>
   */
  @java.lang.Override
  public com.github.peterrk.protocache.pb.Vec2DOrBuilder getMatrixOrBuilder() {
    return matrix_ == null ? com.github.peterrk.protocache.pb.Vec2D.getDefaultInstance() : matrix_;
  }

  public static final int VECTOR_FIELD_NUMBER = 29;
  @SuppressWarnings("serial")
  private java.util.List<com.github.peterrk.protocache.pb.ArrMap> vector_;
  /**
   * <code>repeated .test.ArrMap vector = 29;</code>
   */
  @java.lang.Override
  public java.util.List<com.github.peterrk.protocache.pb.ArrMap> getVectorList() {
    return vector_;
  }
  /**
   * <code>repeated .test.ArrMap vector = 29;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.github.peterrk.protocache.pb.ArrMapOrBuilder> 
      getVectorOrBuilderList() {
    return vector_;
  }
  /**
   * <code>repeated .test.ArrMap vector = 29;</code>
   */
  @java.lang.Override
  public int getVectorCount() {
    return vector_.size();
  }
  /**
   * <code>repeated .test.ArrMap vector = 29;</code>
   */
  @java.lang.Override
  public com.github.peterrk.protocache.pb.ArrMap getVector(int index) {
    return vector_.get(index);
  }
  /**
   * <code>repeated .test.ArrMap vector = 29;</code>
   */
  @java.lang.Override
  public com.github.peterrk.protocache.pb.ArrMapOrBuilder getVectorOrBuilder(
      int index) {
    return vector_.get(index);
  }

  public static final int ARRAYS_FIELD_NUMBER = 30;
  private com.github.peterrk.protocache.pb.ArrMap arrays_;
  /**
   * <code>.test.ArrMap arrays = 30;</code>
   * @return Whether the arrays field is set.
   */
  @java.lang.Override
  public boolean hasArrays() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>.test.ArrMap arrays = 30;</code>
   * @return The arrays.
   */
  @java.lang.Override
  public com.github.peterrk.protocache.pb.ArrMap getArrays() {
    return arrays_ == null ? com.github.peterrk.protocache.pb.ArrMap.getDefaultInstance() : arrays_;
  }
  /**
   * <code>.test.ArrMap arrays = 30;</code>
   */
  @java.lang.Override
  public com.github.peterrk.protocache.pb.ArrMapOrBuilder getArraysOrBuilder() {
    return arrays_ == null ? com.github.peterrk.protocache.pb.ArrMap.getDefaultInstance() : arrays_;
  }

  public static final int MODEV_FIELD_NUMBER = 32;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList modev_;
  private static final com.google.protobuf.Internal.IntListAdapter.IntConverter<
      com.github.peterrk.protocache.pb.Mode> modev_converter_ =
          new com.google.protobuf.Internal.IntListAdapter.IntConverter<
              com.github.peterrk.protocache.pb.Mode>() {
            public com.github.peterrk.protocache.pb.Mode convert(int from) {
              com.github.peterrk.protocache.pb.Mode result = com.github.peterrk.protocache.pb.Mode.forNumber(from);
              return result == null ? com.github.peterrk.protocache.pb.Mode.UNRECOGNIZED : result;
            }
          };
  /**
   * <code>repeated .test.Mode modev = 32;</code>
   * @return A list containing the modev.
   */
  @java.lang.Override
  public java.util.List<com.github.peterrk.protocache.pb.Mode> getModevList() {
    return new com.google.protobuf.Internal.IntListAdapter<
        com.github.peterrk.protocache.pb.Mode>(modev_, modev_converter_);
  }
  /**
   * <code>repeated .test.Mode modev = 32;</code>
   * @return The count of modev.
   */
  @java.lang.Override
  public int getModevCount() {
    return modev_.size();
  }
  /**
   * <code>repeated .test.Mode modev = 32;</code>
   * @param index The index of the element to return.
   * @return The modev at the given index.
   */
  @java.lang.Override
  public com.github.peterrk.protocache.pb.Mode getModev(int index) {
    return modev_converter_.convert(modev_.getInt(index));
  }
  /**
   * <code>repeated .test.Mode modev = 32;</code>
   * @return A list containing the enum numeric values on the wire for modev.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
  getModevValueList() {
    return modev_;
  }
  /**
   * <code>repeated .test.Mode modev = 32;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of modev at the given index.
   */
  @java.lang.Override
  public int getModevValue(int index) {
    return modev_.getInt(index);
  }
  private int modevMemoizedSerializedSize;

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (i32_ != 0) {
      output.writeInt32(1, i32_);
    }
    if (u32_ != 0) {
      output.writeUInt32(2, u32_);
    }
    if (i64_ != 0L) {
      output.writeInt64(3, i64_);
    }
    if (u64_ != 0L) {
      output.writeUInt64(4, u64_);
    }
    if (flag_ != false) {
      output.writeBool(5, flag_);
    }
    if (mode_ != com.github.peterrk.protocache.pb.Mode.MODE_A.getNumber()) {
      output.writeEnum(6, mode_);
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(str_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 7, str_);
    }
    if (!data_.isEmpty()) {
      output.writeBytes(8, data_);
    }
    if (java.lang.Float.floatToRawIntBits(f32_) != 0) {
      output.writeFloat(9, f32_);
    }
    if (java.lang.Double.doubleToRawLongBits(f64_) != 0) {
      output.writeDouble(10, f64_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(11, getObject());
    }
    if (getI32VList().size() > 0) {
      output.writeUInt32NoTag(98);
      output.writeUInt32NoTag(i32VMemoizedSerializedSize);
    }
    for (int i = 0; i < i32V_.size(); i++) {
      output.writeInt32NoTag(i32V_.getInt(i));
    }
    if (getU64VList().size() > 0) {
      output.writeUInt32NoTag(106);
      output.writeUInt32NoTag(u64VMemoizedSerializedSize);
    }
    for (int i = 0; i < u64V_.size(); i++) {
      output.writeUInt64NoTag(u64V_.getLong(i));
    }
    for (int i = 0; i < strv_.size(); i++) {
      com.google.protobuf.GeneratedMessage.writeString(output, 14, strv_.getRaw(i));
    }
    for (int i = 0; i < datav_.size(); i++) {
      output.writeBytes(15, datav_.get(i));
    }
    if (getF32VList().size() > 0) {
      output.writeUInt32NoTag(130);
      output.writeUInt32NoTag(f32VMemoizedSerializedSize);
    }
    for (int i = 0; i < f32V_.size(); i++) {
      output.writeFloatNoTag(f32V_.getFloat(i));
    }
    if (getF64VList().size() > 0) {
      output.writeUInt32NoTag(138);
      output.writeUInt32NoTag(f64VMemoizedSerializedSize);
    }
    for (int i = 0; i < f64V_.size(); i++) {
      output.writeDoubleNoTag(f64V_.getDouble(i));
    }
    if (getFlagsList().size() > 0) {
      output.writeUInt32NoTag(146);
      output.writeUInt32NoTag(flagsMemoizedSerializedSize);
    }
    for (int i = 0; i < flags_.size(); i++) {
      output.writeBoolNoTag(flags_.getBoolean(i));
    }
    for (int i = 0; i < objectv_.size(); i++) {
      output.writeMessage(19, objectv_.get(i));
    }
    if (tU32_ != 0) {
      output.writeFixed32(20, tU32_);
    }
    if (tI32_ != 0) {
      output.writeSFixed32(21, tI32_);
    }
    if (tS32_ != 0) {
      output.writeSInt32(22, tS32_);
    }
    if (tU64_ != 0L) {
      output.writeFixed64(23, tU64_);
    }
    if (tI64_ != 0L) {
      output.writeSFixed64(24, tI64_);
    }
    if (tS64_ != 0L) {
      output.writeSInt64(25, tS64_);
    }
    com.google.protobuf.GeneratedMessage
      .serializeStringMapTo(
        output,
        internalGetIndex(),
        IndexDefaultEntryHolder.defaultEntry,
        26);
    com.google.protobuf.GeneratedMessage
      .serializeIntegerMapTo(
        output,
        internalGetObjects(),
        ObjectsDefaultEntryHolder.defaultEntry,
        27);
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(28, getMatrix());
    }
    for (int i = 0; i < vector_.size(); i++) {
      output.writeMessage(29, vector_.get(i));
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(30, getArrays());
    }
    if (getModevList().size() > 0) {
      output.writeUInt32NoTag(258);
      output.writeUInt32NoTag(modevMemoizedSerializedSize);
    }
    for (int i = 0; i < modev_.size(); i++) {
      output.writeEnumNoTag(modev_.getInt(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (i32_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, i32_);
    }
    if (u32_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(2, u32_);
    }
    if (i64_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(3, i64_);
    }
    if (u64_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(4, u64_);
    }
    if (flag_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, flag_);
    }
    if (mode_ != com.github.peterrk.protocache.pb.Mode.MODE_A.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(6, mode_);
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(str_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(7, str_);
    }
    if (!data_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(8, data_);
    }
    if (java.lang.Float.floatToRawIntBits(f32_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(9, f32_);
    }
    if (java.lang.Double.doubleToRawLongBits(f64_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(10, f64_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getObject());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < i32V_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(i32V_.getInt(i));
      }
      size += dataSize;
      if (!getI32VList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      i32VMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < u64V_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeUInt64SizeNoTag(u64V_.getLong(i));
      }
      size += dataSize;
      if (!getU64VList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      u64VMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < strv_.size(); i++) {
        dataSize += computeStringSizeNoTag(strv_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getStrvList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < datav_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeBytesSizeNoTag(datav_.get(i));
      }
      size += dataSize;
      size += 1 * getDatavList().size();
    }
    {
      int dataSize = 0;
      dataSize = 4 * getF32VList().size();
      size += dataSize;
      if (!getF32VList().isEmpty()) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      f32VMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getF64VList().size();
      size += dataSize;
      if (!getF64VList().isEmpty()) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      f64VMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 1 * getFlagsList().size();
      size += dataSize;
      if (!getFlagsList().isEmpty()) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      flagsMemoizedSerializedSize = dataSize;
    }
    for (int i = 0; i < objectv_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(19, objectv_.get(i));
    }
    if (tU32_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFixed32Size(20, tU32_);
    }
    if (tI32_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeSFixed32Size(21, tI32_);
    }
    if (tS32_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt32Size(22, tS32_);
    }
    if (tU64_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeFixed64Size(23, tU64_);
    }
    if (tI64_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeSFixed64Size(24, tI64_);
    }
    if (tS64_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt64Size(25, tS64_);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
         : internalGetIndex().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
      index__ = IndexDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, index__);
    }
    for (java.util.Map.Entry<java.lang.Integer, com.github.peterrk.protocache.pb.Small> entry
         : internalGetObjects().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Integer, com.github.peterrk.protocache.pb.Small>
      objects__ = ObjectsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(27, objects__);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(28, getMatrix());
    }
    for (int i = 0; i < vector_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(29, vector_.get(i));
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(30, getArrays());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < modev_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(modev_.getInt(i));
      }
      size += dataSize;
      if (!getModevList().isEmpty()) {  size += 2;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }modevMemoizedSerializedSize = dataSize;
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.peterrk.protocache.pb.Main)) {
      return super.equals(obj);
    }
    com.github.peterrk.protocache.pb.Main other = (com.github.peterrk.protocache.pb.Main) obj;

    if (getI32()
        != other.getI32()) return false;
    if (getU32()
        != other.getU32()) return false;
    if (getI64()
        != other.getI64()) return false;
    if (getU64()
        != other.getU64()) return false;
    if (getFlag()
        != other.getFlag()) return false;
    if (mode_ != other.mode_) return false;
    if (!getStr()
        .equals(other.getStr())) return false;
    if (!getData()
        .equals(other.getData())) return false;
    if (java.lang.Float.floatToIntBits(getF32())
        != java.lang.Float.floatToIntBits(
            other.getF32())) return false;
    if (java.lang.Double.doubleToLongBits(getF64())
        != java.lang.Double.doubleToLongBits(
            other.getF64())) return false;
    if (hasObject() != other.hasObject()) return false;
    if (hasObject()) {
      if (!getObject()
          .equals(other.getObject())) return false;
    }
    if (!getI32VList()
        .equals(other.getI32VList())) return false;
    if (!getU64VList()
        .equals(other.getU64VList())) return false;
    if (!getStrvList()
        .equals(other.getStrvList())) return false;
    if (!getDatavList()
        .equals(other.getDatavList())) return false;
    if (!getF32VList()
        .equals(other.getF32VList())) return false;
    if (!getF64VList()
        .equals(other.getF64VList())) return false;
    if (!getFlagsList()
        .equals(other.getFlagsList())) return false;
    if (!getObjectvList()
        .equals(other.getObjectvList())) return false;
    if (getTU32()
        != other.getTU32()) return false;
    if (getTI32()
        != other.getTI32()) return false;
    if (getTS32()
        != other.getTS32()) return false;
    if (getTU64()
        != other.getTU64()) return false;
    if (getTI64()
        != other.getTI64()) return false;
    if (getTS64()
        != other.getTS64()) return false;
    if (!internalGetIndex().equals(
        other.internalGetIndex())) return false;
    if (!internalGetObjects().equals(
        other.internalGetObjects())) return false;
    if (hasMatrix() != other.hasMatrix()) return false;
    if (hasMatrix()) {
      if (!getMatrix()
          .equals(other.getMatrix())) return false;
    }
    if (!getVectorList()
        .equals(other.getVectorList())) return false;
    if (hasArrays() != other.hasArrays()) return false;
    if (hasArrays()) {
      if (!getArrays()
          .equals(other.getArrays())) return false;
    }
    if (!modev_.equals(other.modev_)) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + I32_FIELD_NUMBER;
    hash = (53 * hash) + getI32();
    hash = (37 * hash) + U32_FIELD_NUMBER;
    hash = (53 * hash) + getU32();
    hash = (37 * hash) + I64_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getI64());
    hash = (37 * hash) + U64_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getU64());
    hash = (37 * hash) + FLAG_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getFlag());
    hash = (37 * hash) + MODE_FIELD_NUMBER;
    hash = (53 * hash) + mode_;
    hash = (37 * hash) + STR_FIELD_NUMBER;
    hash = (53 * hash) + getStr().hashCode();
    hash = (37 * hash) + DATA_FIELD_NUMBER;
    hash = (53 * hash) + getData().hashCode();
    hash = (37 * hash) + F32_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getF32());
    hash = (37 * hash) + F64_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getF64()));
    if (hasObject()) {
      hash = (37 * hash) + OBJECT_FIELD_NUMBER;
      hash = (53 * hash) + getObject().hashCode();
    }
    if (getI32VCount() > 0) {
      hash = (37 * hash) + I32V_FIELD_NUMBER;
      hash = (53 * hash) + getI32VList().hashCode();
    }
    if (getU64VCount() > 0) {
      hash = (37 * hash) + U64V_FIELD_NUMBER;
      hash = (53 * hash) + getU64VList().hashCode();
    }
    if (getStrvCount() > 0) {
      hash = (37 * hash) + STRV_FIELD_NUMBER;
      hash = (53 * hash) + getStrvList().hashCode();
    }
    if (getDatavCount() > 0) {
      hash = (37 * hash) + DATAV_FIELD_NUMBER;
      hash = (53 * hash) + getDatavList().hashCode();
    }
    if (getF32VCount() > 0) {
      hash = (37 * hash) + F32V_FIELD_NUMBER;
      hash = (53 * hash) + getF32VList().hashCode();
    }
    if (getF64VCount() > 0) {
      hash = (37 * hash) + F64V_FIELD_NUMBER;
      hash = (53 * hash) + getF64VList().hashCode();
    }
    if (getFlagsCount() > 0) {
      hash = (37 * hash) + FLAGS_FIELD_NUMBER;
      hash = (53 * hash) + getFlagsList().hashCode();
    }
    if (getObjectvCount() > 0) {
      hash = (37 * hash) + OBJECTV_FIELD_NUMBER;
      hash = (53 * hash) + getObjectvList().hashCode();
    }
    hash = (37 * hash) + T_U32_FIELD_NUMBER;
    hash = (53 * hash) + getTU32();
    hash = (37 * hash) + T_I32_FIELD_NUMBER;
    hash = (53 * hash) + getTI32();
    hash = (37 * hash) + T_S32_FIELD_NUMBER;
    hash = (53 * hash) + getTS32();
    hash = (37 * hash) + T_U64_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTU64());
    hash = (37 * hash) + T_I64_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTI64());
    hash = (37 * hash) + T_S64_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTS64());
    if (!internalGetIndex().getMap().isEmpty()) {
      hash = (37 * hash) + INDEX_FIELD_NUMBER;
      hash = (53 * hash) + internalGetIndex().hashCode();
    }
    if (!internalGetObjects().getMap().isEmpty()) {
      hash = (37 * hash) + OBJECTS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetObjects().hashCode();
    }
    if (hasMatrix()) {
      hash = (37 * hash) + MATRIX_FIELD_NUMBER;
      hash = (53 * hash) + getMatrix().hashCode();
    }
    if (getVectorCount() > 0) {
      hash = (37 * hash) + VECTOR_FIELD_NUMBER;
      hash = (53 * hash) + getVectorList().hashCode();
    }
    if (hasArrays()) {
      hash = (37 * hash) + ARRAYS_FIELD_NUMBER;
      hash = (53 * hash) + getArrays().hashCode();
    }
    if (getModevCount() > 0) {
      hash = (37 * hash) + MODEV_FIELD_NUMBER;
      hash = (53 * hash) + modev_.hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.peterrk.protocache.pb.Main parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.peterrk.protocache.pb.Main parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.peterrk.protocache.pb.Main parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.peterrk.protocache.pb.Main parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.peterrk.protocache.pb.Main parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.peterrk.protocache.pb.Main parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.peterrk.protocache.pb.Main parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.github.peterrk.protocache.pb.Main parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.github.peterrk.protocache.pb.Main parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.github.peterrk.protocache.pb.Main parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.peterrk.protocache.pb.Main parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.github.peterrk.protocache.pb.Main parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.peterrk.protocache.pb.Main prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code test.Main}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:test.Main)
      com.github.peterrk.protocache.pb.MainOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.peterrk.protocache.pb.Test.internal_static_test_Main_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 26:
          return internalGetIndex();
        case 27:
          return internalGetObjects();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
        int number) {
      switch (number) {
        case 26:
          return internalGetMutableIndex();
        case 27:
          return internalGetMutableObjects();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.peterrk.protocache.pb.Test.internal_static_test_Main_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.peterrk.protocache.pb.Main.class, com.github.peterrk.protocache.pb.Main.Builder.class);
    }

    // Construct using com.github.peterrk.protocache.pb.Main.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        internalGetObjectFieldBuilder();
        internalGetObjectvFieldBuilder();
        internalGetMatrixFieldBuilder();
        internalGetVectorFieldBuilder();
        internalGetArraysFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      i32_ = 0;
      u32_ = 0;
      i64_ = 0L;
      u64_ = 0L;
      flag_ = false;
      mode_ = 0;
      str_ = "";
      data_ = com.google.protobuf.ByteString.EMPTY;
      f32_ = 0F;
      f64_ = 0D;
      object_ = null;
      if (objectBuilder_ != null) {
        objectBuilder_.dispose();
        objectBuilder_ = null;
      }
      i32V_ = emptyIntList();
      u64V_ = emptyLongList();
      strv_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      datav_ = emptyList(com.google.protobuf.ByteString.class);
      f32V_ = emptyFloatList();
      f64V_ = emptyDoubleList();
      flags_ = emptyBooleanList();
      if (objectvBuilder_ == null) {
        objectv_ = java.util.Collections.emptyList();
      } else {
        objectv_ = null;
        objectvBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00040000);
      tU32_ = 0;
      tI32_ = 0;
      tS32_ = 0;
      tU64_ = 0L;
      tI64_ = 0L;
      tS64_ = 0L;
      internalGetMutableIndex().clear();
      internalGetMutableObjects().clear();
      matrix_ = null;
      if (matrixBuilder_ != null) {
        matrixBuilder_.dispose();
        matrixBuilder_ = null;
      }
      if (vectorBuilder_ == null) {
        vector_ = java.util.Collections.emptyList();
      } else {
        vector_ = null;
        vectorBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x10000000);
      arrays_ = null;
      if (arraysBuilder_ != null) {
        arraysBuilder_.dispose();
        arraysBuilder_ = null;
      }
      modev_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x40000000);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.peterrk.protocache.pb.Test.internal_static_test_Main_descriptor;
    }

    @java.lang.Override
    public com.github.peterrk.protocache.pb.Main getDefaultInstanceForType() {
      return com.github.peterrk.protocache.pb.Main.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.peterrk.protocache.pb.Main build() {
      com.github.peterrk.protocache.pb.Main result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.peterrk.protocache.pb.Main buildPartial() {
      com.github.peterrk.protocache.pb.Main result = new com.github.peterrk.protocache.pb.Main(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.github.peterrk.protocache.pb.Main result) {
      if (objectvBuilder_ == null) {
        if (((bitField0_ & 0x00040000) != 0)) {
          objectv_ = java.util.Collections.unmodifiableList(objectv_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.objectv_ = objectv_;
      } else {
        result.objectv_ = objectvBuilder_.build();
      }
      if (vectorBuilder_ == null) {
        if (((bitField0_ & 0x10000000) != 0)) {
          vector_ = java.util.Collections.unmodifiableList(vector_);
          bitField0_ = (bitField0_ & ~0x10000000);
        }
        result.vector_ = vector_;
      } else {
        result.vector_ = vectorBuilder_.build();
      }
      if (((bitField0_ & 0x40000000) != 0)) {
        modev_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x40000000);
      }
      result.modev_ = modev_;
    }

    private void buildPartial0(com.github.peterrk.protocache.pb.Main result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.i32_ = i32_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.u32_ = u32_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.i64_ = i64_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.u64_ = u64_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.flag_ = flag_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.mode_ = mode_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.str_ = str_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.data_ = data_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.f32_ = f32_;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.f64_ = f64_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.object_ = objectBuilder_ == null
            ? object_
            : objectBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        i32V_.makeImmutable();
        result.i32V_ = i32V_;
      }
      if (((from_bitField0_ & 0x00001000) != 0)) {
        u64V_.makeImmutable();
        result.u64V_ = u64V_;
      }
      if (((from_bitField0_ & 0x00002000) != 0)) {
        strv_.makeImmutable();
        result.strv_ = strv_;
      }
      if (((from_bitField0_ & 0x00004000) != 0)) {
        datav_.makeImmutable();
        result.datav_ = datav_;
      }
      if (((from_bitField0_ & 0x00008000) != 0)) {
        f32V_.makeImmutable();
        result.f32V_ = f32V_;
      }
      if (((from_bitField0_ & 0x00010000) != 0)) {
        f64V_.makeImmutable();
        result.f64V_ = f64V_;
      }
      if (((from_bitField0_ & 0x00020000) != 0)) {
        flags_.makeImmutable();
        result.flags_ = flags_;
      }
      if (((from_bitField0_ & 0x00080000) != 0)) {
        result.tU32_ = tU32_;
      }
      if (((from_bitField0_ & 0x00100000) != 0)) {
        result.tI32_ = tI32_;
      }
      if (((from_bitField0_ & 0x00200000) != 0)) {
        result.tS32_ = tS32_;
      }
      if (((from_bitField0_ & 0x00400000) != 0)) {
        result.tU64_ = tU64_;
      }
      if (((from_bitField0_ & 0x00800000) != 0)) {
        result.tI64_ = tI64_;
      }
      if (((from_bitField0_ & 0x01000000) != 0)) {
        result.tS64_ = tS64_;
      }
      if (((from_bitField0_ & 0x02000000) != 0)) {
        result.index_ = internalGetIndex();
        result.index_.makeImmutable();
      }
      if (((from_bitField0_ & 0x04000000) != 0)) {
        result.objects_ = internalGetObjects().build(ObjectsDefaultEntryHolder.defaultEntry);
      }
      if (((from_bitField0_ & 0x08000000) != 0)) {
        result.matrix_ = matrixBuilder_ == null
            ? matrix_
            : matrixBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x20000000) != 0)) {
        result.arrays_ = arraysBuilder_ == null
            ? arrays_
            : arraysBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.peterrk.protocache.pb.Main) {
        return mergeFrom((com.github.peterrk.protocache.pb.Main)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.peterrk.protocache.pb.Main other) {
      if (other == com.github.peterrk.protocache.pb.Main.getDefaultInstance()) return this;
      if (other.getI32() != 0) {
        setI32(other.getI32());
      }
      if (other.getU32() != 0) {
        setU32(other.getU32());
      }
      if (other.getI64() != 0L) {
        setI64(other.getI64());
      }
      if (other.getU64() != 0L) {
        setU64(other.getU64());
      }
      if (other.getFlag() != false) {
        setFlag(other.getFlag());
      }
      if (other.mode_ != 0) {
        setModeValue(other.getModeValue());
      }
      if (!other.getStr().isEmpty()) {
        str_ = other.str_;
        bitField0_ |= 0x00000040;
        onChanged();
      }
      if (!other.getData().isEmpty()) {
        setData(other.getData());
      }
      if (java.lang.Float.floatToRawIntBits(other.getF32()) != 0) {
        setF32(other.getF32());
      }
      if (java.lang.Double.doubleToRawLongBits(other.getF64()) != 0) {
        setF64(other.getF64());
      }
      if (other.hasObject()) {
        mergeObject(other.getObject());
      }
      if (!other.i32V_.isEmpty()) {
        if (i32V_.isEmpty()) {
          i32V_ = other.i32V_;
          i32V_.makeImmutable();
          bitField0_ |= 0x00000800;
        } else {
          ensureI32VIsMutable();
          i32V_.addAll(other.i32V_);
        }
        onChanged();
      }
      if (!other.u64V_.isEmpty()) {
        if (u64V_.isEmpty()) {
          u64V_ = other.u64V_;
          u64V_.makeImmutable();
          bitField0_ |= 0x00001000;
        } else {
          ensureU64VIsMutable();
          u64V_.addAll(other.u64V_);
        }
        onChanged();
      }
      if (!other.strv_.isEmpty()) {
        if (strv_.isEmpty()) {
          strv_ = other.strv_;
          bitField0_ |= 0x00002000;
        } else {
          ensureStrvIsMutable();
          strv_.addAll(other.strv_);
        }
        onChanged();
      }
      if (!other.datav_.isEmpty()) {
        if (datav_.isEmpty()) {
          datav_ = other.datav_;
          datav_.makeImmutable();
          bitField0_ |= 0x00004000;
        } else {
          ensureDatavIsMutable();
          datav_.addAll(other.datav_);
        }
        onChanged();
      }
      if (!other.f32V_.isEmpty()) {
        if (f32V_.isEmpty()) {
          f32V_ = other.f32V_;
          f32V_.makeImmutable();
          bitField0_ |= 0x00008000;
        } else {
          ensureF32VIsMutable();
          f32V_.addAll(other.f32V_);
        }
        onChanged();
      }
      if (!other.f64V_.isEmpty()) {
        if (f64V_.isEmpty()) {
          f64V_ = other.f64V_;
          f64V_.makeImmutable();
          bitField0_ |= 0x00010000;
        } else {
          ensureF64VIsMutable();
          f64V_.addAll(other.f64V_);
        }
        onChanged();
      }
      if (!other.flags_.isEmpty()) {
        if (flags_.isEmpty()) {
          flags_ = other.flags_;
          flags_.makeImmutable();
          bitField0_ |= 0x00020000;
        } else {
          ensureFlagsIsMutable();
          flags_.addAll(other.flags_);
        }
        onChanged();
      }
      if (objectvBuilder_ == null) {
        if (!other.objectv_.isEmpty()) {
          if (objectv_.isEmpty()) {
            objectv_ = other.objectv_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureObjectvIsMutable();
            objectv_.addAll(other.objectv_);
          }
          onChanged();
        }
      } else {
        if (!other.objectv_.isEmpty()) {
          if (objectvBuilder_.isEmpty()) {
            objectvBuilder_.dispose();
            objectvBuilder_ = null;
            objectv_ = other.objectv_;
            bitField0_ = (bitField0_ & ~0x00040000);
            objectvBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 internalGetObjectvFieldBuilder() : null;
          } else {
            objectvBuilder_.addAllMessages(other.objectv_);
          }
        }
      }
      if (other.getTU32() != 0) {
        setTU32(other.getTU32());
      }
      if (other.getTI32() != 0) {
        setTI32(other.getTI32());
      }
      if (other.getTS32() != 0) {
        setTS32(other.getTS32());
      }
      if (other.getTU64() != 0L) {
        setTU64(other.getTU64());
      }
      if (other.getTI64() != 0L) {
        setTI64(other.getTI64());
      }
      if (other.getTS64() != 0L) {
        setTS64(other.getTS64());
      }
      internalGetMutableIndex().mergeFrom(
          other.internalGetIndex());
      bitField0_ |= 0x02000000;
      internalGetMutableObjects().mergeFrom(
          other.internalGetObjects());
      bitField0_ |= 0x04000000;
      if (other.hasMatrix()) {
        mergeMatrix(other.getMatrix());
      }
      if (vectorBuilder_ == null) {
        if (!other.vector_.isEmpty()) {
          if (vector_.isEmpty()) {
            vector_ = other.vector_;
            bitField0_ = (bitField0_ & ~0x10000000);
          } else {
            ensureVectorIsMutable();
            vector_.addAll(other.vector_);
          }
          onChanged();
        }
      } else {
        if (!other.vector_.isEmpty()) {
          if (vectorBuilder_.isEmpty()) {
            vectorBuilder_.dispose();
            vectorBuilder_ = null;
            vector_ = other.vector_;
            bitField0_ = (bitField0_ & ~0x10000000);
            vectorBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 internalGetVectorFieldBuilder() : null;
          } else {
            vectorBuilder_.addAllMessages(other.vector_);
          }
        }
      }
      if (other.hasArrays()) {
        mergeArrays(other.getArrays());
      }
      if (!other.modev_.isEmpty()) {
        if (modev_.isEmpty()) {
          modev_ = other.modev_;
          bitField0_ = (bitField0_ & ~0x40000000);
        } else {
          ensureModevIsMutable();
          modev_.addAll(other.modev_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              i32_ = input.readInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              u32_ = input.readUInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              i64_ = input.readInt64();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              u64_ = input.readUInt64();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              flag_ = input.readBool();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 48: {
              mode_ = input.readEnum();
              bitField0_ |= 0x00000020;
              break;
            } // case 48
            case 58: {
              str_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000040;
              break;
            } // case 58
            case 66: {
              data_ = input.readBytes();
              bitField0_ |= 0x00000080;
              break;
            } // case 66
            case 77: {
              f32_ = input.readFloat();
              bitField0_ |= 0x00000100;
              break;
            } // case 77
            case 81: {
              f64_ = input.readDouble();
              bitField0_ |= 0x00000200;
              break;
            } // case 81
            case 90: {
              input.readMessage(
                  internalGetObjectFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000400;
              break;
            } // case 90
            case 96: {
              int v = input.readInt32();
              ensureI32VIsMutable();
              i32V_.addInt(v);
              break;
            } // case 96
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureI32VIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                i32V_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            } // case 98
            case 104: {
              long v = input.readUInt64();
              ensureU64VIsMutable();
              u64V_.addLong(v);
              break;
            } // case 104
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureU64VIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                u64V_.addLong(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            } // case 106
            case 114: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureStrvIsMutable();
              strv_.add(s);
              break;
            } // case 114
            case 122: {
              com.google.protobuf.ByteString v = input.readBytes();
              ensureDatavIsMutable();
              datav_.add(v);
              break;
            } // case 122
            case 133: {
              float v = input.readFloat();
              ensureF32VIsMutable();
              f32V_.addFloat(v);
              break;
            } // case 133
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              int alloc = length > 4096 ? 4096 : length;
              ensureF32VIsMutable(alloc / 4);
              while (input.getBytesUntilLimit() > 0) {
                f32V_.addFloat(input.readFloat());
              }
              input.popLimit(limit);
              break;
            } // case 130
            case 137: {
              double v = input.readDouble();
              ensureF64VIsMutable();
              f64V_.addDouble(v);
              break;
            } // case 137
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              int alloc = length > 4096 ? 4096 : length;
              ensureF64VIsMutable(alloc / 8);
              while (input.getBytesUntilLimit() > 0) {
                f64V_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            } // case 138
            case 144: {
              boolean v = input.readBool();
              ensureFlagsIsMutable();
              flags_.addBoolean(v);
              break;
            } // case 144
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              int alloc = length > 4096 ? 4096 : length;
              ensureFlagsIsMutable(alloc / 1);
              while (input.getBytesUntilLimit() > 0) {
                flags_.addBoolean(input.readBool());
              }
              input.popLimit(limit);
              break;
            } // case 146
            case 154: {
              com.github.peterrk.protocache.pb.Small m =
                  input.readMessage(
                      com.github.peterrk.protocache.pb.Small.parser(),
                      extensionRegistry);
              if (objectvBuilder_ == null) {
                ensureObjectvIsMutable();
                objectv_.add(m);
              } else {
                objectvBuilder_.addMessage(m);
              }
              break;
            } // case 154
            case 165: {
              tU32_ = input.readFixed32();
              bitField0_ |= 0x00080000;
              break;
            } // case 165
            case 173: {
              tI32_ = input.readSFixed32();
              bitField0_ |= 0x00100000;
              break;
            } // case 173
            case 176: {
              tS32_ = input.readSInt32();
              bitField0_ |= 0x00200000;
              break;
            } // case 176
            case 185: {
              tU64_ = input.readFixed64();
              bitField0_ |= 0x00400000;
              break;
            } // case 185
            case 193: {
              tI64_ = input.readSFixed64();
              bitField0_ |= 0x00800000;
              break;
            } // case 193
            case 200: {
              tS64_ = input.readSInt64();
              bitField0_ |= 0x01000000;
              break;
            } // case 200
            case 210: {
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
              index__ = input.readMessage(
                  IndexDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableIndex().getMutableMap().put(
                  index__.getKey(), index__.getValue());
              bitField0_ |= 0x02000000;
              break;
            } // case 210
            case 218: {
              com.google.protobuf.MapEntry<java.lang.Integer, com.github.peterrk.protocache.pb.Small>
              objects__ = input.readMessage(
                  ObjectsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableObjects().ensureBuilderMap().put(
                  objects__.getKey(), objects__.getValue());
              bitField0_ |= 0x04000000;
              break;
            } // case 218
            case 226: {
              input.readMessage(
                  internalGetMatrixFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x08000000;
              break;
            } // case 226
            case 234: {
              com.github.peterrk.protocache.pb.ArrMap m =
                  input.readMessage(
                      com.github.peterrk.protocache.pb.ArrMap.parser(),
                      extensionRegistry);
              if (vectorBuilder_ == null) {
                ensureVectorIsMutable();
                vector_.add(m);
              } else {
                vectorBuilder_.addMessage(m);
              }
              break;
            } // case 234
            case 242: {
              input.readMessage(
                  internalGetArraysFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x20000000;
              break;
            } // case 242
            case 256: {
              int tmpRaw = input.readEnum();
              ensureModevIsMutable();
              modev_.addInt(tmpRaw);
              break;
            } // case 256
            case 258: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int tmpRaw = input.readEnum();
                ensureModevIsMutable();
                modev_.addInt(tmpRaw);
              }
              input.popLimit(oldLimit);
              break;
            } // case 258
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int i32_ ;
    /**
     * <code>int32 i32 = 1;</code>
     * @return The i32.
     */
    @java.lang.Override
    public int getI32() {
      return i32_;
    }
    /**
     * <code>int32 i32 = 1;</code>
     * @param value The i32 to set.
     * @return This builder for chaining.
     */
    public Builder setI32(int value) {

      i32_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>int32 i32 = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearI32() {
      bitField0_ = (bitField0_ & ~0x00000001);
      i32_ = 0;
      onChanged();
      return this;
    }

    private int u32_ ;
    /**
     * <code>uint32 u32 = 2;</code>
     * @return The u32.
     */
    @java.lang.Override
    public int getU32() {
      return u32_;
    }
    /**
     * <code>uint32 u32 = 2;</code>
     * @param value The u32 to set.
     * @return This builder for chaining.
     */
    public Builder setU32(int value) {

      u32_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>uint32 u32 = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearU32() {
      bitField0_ = (bitField0_ & ~0x00000002);
      u32_ = 0;
      onChanged();
      return this;
    }

    private long i64_ ;
    /**
     * <code>int64 i64 = 3;</code>
     * @return The i64.
     */
    @java.lang.Override
    public long getI64() {
      return i64_;
    }
    /**
     * <code>int64 i64 = 3;</code>
     * @param value The i64 to set.
     * @return This builder for chaining.
     */
    public Builder setI64(long value) {

      i64_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>int64 i64 = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearI64() {
      bitField0_ = (bitField0_ & ~0x00000004);
      i64_ = 0L;
      onChanged();
      return this;
    }

    private long u64_ ;
    /**
     * <code>uint64 u64 = 4;</code>
     * @return The u64.
     */
    @java.lang.Override
    public long getU64() {
      return u64_;
    }
    /**
     * <code>uint64 u64 = 4;</code>
     * @param value The u64 to set.
     * @return This builder for chaining.
     */
    public Builder setU64(long value) {

      u64_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <code>uint64 u64 = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearU64() {
      bitField0_ = (bitField0_ & ~0x00000008);
      u64_ = 0L;
      onChanged();
      return this;
    }

    private boolean flag_ ;
    /**
     * <code>bool flag = 5;</code>
     * @return The flag.
     */
    @java.lang.Override
    public boolean getFlag() {
      return flag_;
    }
    /**
     * <code>bool flag = 5;</code>
     * @param value The flag to set.
     * @return This builder for chaining.
     */
    public Builder setFlag(boolean value) {

      flag_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <code>bool flag = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearFlag() {
      bitField0_ = (bitField0_ & ~0x00000010);
      flag_ = false;
      onChanged();
      return this;
    }

    private int mode_ = 0;
    /**
     * <code>.test.Mode mode = 6;</code>
     * @return The enum numeric value on the wire for mode.
     */
    @java.lang.Override public int getModeValue() {
      return mode_;
    }
    /**
     * <code>.test.Mode mode = 6;</code>
     * @param value The enum numeric value on the wire for mode to set.
     * @return This builder for chaining.
     */
    public Builder setModeValue(int value) {
      mode_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <code>.test.Mode mode = 6;</code>
     * @return The mode.
     */
    @java.lang.Override
    public com.github.peterrk.protocache.pb.Mode getMode() {
      com.github.peterrk.protocache.pb.Mode result = com.github.peterrk.protocache.pb.Mode.forNumber(mode_);
      return result == null ? com.github.peterrk.protocache.pb.Mode.UNRECOGNIZED : result;
    }
    /**
     * <code>.test.Mode mode = 6;</code>
     * @param value The mode to set.
     * @return This builder for chaining.
     */
    public Builder setMode(com.github.peterrk.protocache.pb.Mode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000020;
      mode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.test.Mode mode = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearMode() {
      bitField0_ = (bitField0_ & ~0x00000020);
      mode_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object str_ = "";
    /**
     * <code>string str = 7;</code>
     * @return The str.
     */
    public java.lang.String getStr() {
      java.lang.Object ref = str_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        str_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string str = 7;</code>
     * @return The bytes for str.
     */
    public com.google.protobuf.ByteString
        getStrBytes() {
      java.lang.Object ref = str_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        str_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string str = 7;</code>
     * @param value The str to set.
     * @return This builder for chaining.
     */
    public Builder setStr(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      str_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <code>string str = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearStr() {
      str_ = getDefaultInstance().getStr();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }
    /**
     * <code>string str = 7;</code>
     * @param value The bytes for str to set.
     * @return This builder for chaining.
     */
    public Builder setStrBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      str_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes data = 8;</code>
     * @return The data.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getData() {
      return data_;
    }
    /**
     * <code>bytes data = 8;</code>
     * @param value The data to set.
     * @return This builder for chaining.
     */
    public Builder setData(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      data_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <code>bytes data = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearData() {
      bitField0_ = (bitField0_ & ~0x00000080);
      data_ = getDefaultInstance().getData();
      onChanged();
      return this;
    }

    private float f32_ ;
    /**
     * <code>float f32 = 9;</code>
     * @return The f32.
     */
    @java.lang.Override
    public float getF32() {
      return f32_;
    }
    /**
     * <code>float f32 = 9;</code>
     * @param value The f32 to set.
     * @return This builder for chaining.
     */
    public Builder setF32(float value) {

      f32_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <code>float f32 = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearF32() {
      bitField0_ = (bitField0_ & ~0x00000100);
      f32_ = 0F;
      onChanged();
      return this;
    }

    private double f64_ ;
    /**
     * <code>double f64 = 10;</code>
     * @return The f64.
     */
    @java.lang.Override
    public double getF64() {
      return f64_;
    }
    /**
     * <code>double f64 = 10;</code>
     * @param value The f64 to set.
     * @return This builder for chaining.
     */
    public Builder setF64(double value) {

      f64_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <code>double f64 = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearF64() {
      bitField0_ = (bitField0_ & ~0x00000200);
      f64_ = 0D;
      onChanged();
      return this;
    }

    private com.github.peterrk.protocache.pb.Small object_;
    private com.google.protobuf.SingleFieldBuilder<
        com.github.peterrk.protocache.pb.Small, com.github.peterrk.protocache.pb.Small.Builder, com.github.peterrk.protocache.pb.SmallOrBuilder> objectBuilder_;
    /**
     * <code>.test.Small object = 11;</code>
     * @return Whether the object field is set.
     */
    public boolean hasObject() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <code>.test.Small object = 11;</code>
     * @return The object.
     */
    public com.github.peterrk.protocache.pb.Small getObject() {
      if (objectBuilder_ == null) {
        return object_ == null ? com.github.peterrk.protocache.pb.Small.getDefaultInstance() : object_;
      } else {
        return objectBuilder_.getMessage();
      }
    }
    /**
     * <code>.test.Small object = 11;</code>
     */
    public Builder setObject(com.github.peterrk.protocache.pb.Small value) {
      if (objectBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        object_ = value;
      } else {
        objectBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <code>.test.Small object = 11;</code>
     */
    public Builder setObject(
        com.github.peterrk.protocache.pb.Small.Builder builderForValue) {
      if (objectBuilder_ == null) {
        object_ = builderForValue.build();
      } else {
        objectBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <code>.test.Small object = 11;</code>
     */
    public Builder mergeObject(com.github.peterrk.protocache.pb.Small value) {
      if (objectBuilder_ == null) {
        if (((bitField0_ & 0x00000400) != 0) &&
          object_ != null &&
          object_ != com.github.peterrk.protocache.pb.Small.getDefaultInstance()) {
          getObjectBuilder().mergeFrom(value);
        } else {
          object_ = value;
        }
      } else {
        objectBuilder_.mergeFrom(value);
      }
      if (object_ != null) {
        bitField0_ |= 0x00000400;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.test.Small object = 11;</code>
     */
    public Builder clearObject() {
      bitField0_ = (bitField0_ & ~0x00000400);
      object_ = null;
      if (objectBuilder_ != null) {
        objectBuilder_.dispose();
        objectBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.test.Small object = 11;</code>
     */
    public com.github.peterrk.protocache.pb.Small.Builder getObjectBuilder() {
      bitField0_ |= 0x00000400;
      onChanged();
      return internalGetObjectFieldBuilder().getBuilder();
    }
    /**
     * <code>.test.Small object = 11;</code>
     */
    public com.github.peterrk.protocache.pb.SmallOrBuilder getObjectOrBuilder() {
      if (objectBuilder_ != null) {
        return objectBuilder_.getMessageOrBuilder();
      } else {
        return object_ == null ?
            com.github.peterrk.protocache.pb.Small.getDefaultInstance() : object_;
      }
    }
    /**
     * <code>.test.Small object = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.github.peterrk.protocache.pb.Small, com.github.peterrk.protocache.pb.Small.Builder, com.github.peterrk.protocache.pb.SmallOrBuilder> 
        internalGetObjectFieldBuilder() {
      if (objectBuilder_ == null) {
        objectBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.github.peterrk.protocache.pb.Small, com.github.peterrk.protocache.pb.Small.Builder, com.github.peterrk.protocache.pb.SmallOrBuilder>(
                getObject(),
                getParentForChildren(),
                isClean());
        object_ = null;
      }
      return objectBuilder_;
    }

    private com.google.protobuf.Internal.IntList i32V_ = emptyIntList();
    private void ensureI32VIsMutable() {
      if (!i32V_.isModifiable()) {
        i32V_ = makeMutableCopy(i32V_);
      }
      bitField0_ |= 0x00000800;
    }
    /**
     * <code>repeated int32 i32v = 12;</code>
     * @return A list containing the i32v.
     */
    public java.util.List<java.lang.Integer>
        getI32VList() {
      i32V_.makeImmutable();
      return i32V_;
    }
    /**
     * <code>repeated int32 i32v = 12;</code>
     * @return The count of i32v.
     */
    public int getI32VCount() {
      return i32V_.size();
    }
    /**
     * <code>repeated int32 i32v = 12;</code>
     * @param index The index of the element to return.
     * @return The i32v at the given index.
     */
    public int getI32V(int index) {
      return i32V_.getInt(index);
    }
    /**
     * <code>repeated int32 i32v = 12;</code>
     * @param index The index to set the value at.
     * @param value The i32v to set.
     * @return This builder for chaining.
     */
    public Builder setI32V(
        int index, int value) {

      ensureI32VIsMutable();
      i32V_.setInt(index, value);
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 i32v = 12;</code>
     * @param value The i32v to add.
     * @return This builder for chaining.
     */
    public Builder addI32V(int value) {

      ensureI32VIsMutable();
      i32V_.addInt(value);
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 i32v = 12;</code>
     * @param values The i32v to add.
     * @return This builder for chaining.
     */
    public Builder addAllI32V(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureI32VIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, i32V_);
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 i32v = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearI32V() {
      i32V_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000800);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.LongList u64V_ = emptyLongList();
    private void ensureU64VIsMutable() {
      if (!u64V_.isModifiable()) {
        u64V_ = makeMutableCopy(u64V_);
      }
      bitField0_ |= 0x00001000;
    }
    /**
     * <code>repeated uint64 u64v = 13;</code>
     * @return A list containing the u64v.
     */
    public java.util.List<java.lang.Long>
        getU64VList() {
      u64V_.makeImmutable();
      return u64V_;
    }
    /**
     * <code>repeated uint64 u64v = 13;</code>
     * @return The count of u64v.
     */
    public int getU64VCount() {
      return u64V_.size();
    }
    /**
     * <code>repeated uint64 u64v = 13;</code>
     * @param index The index of the element to return.
     * @return The u64v at the given index.
     */
    public long getU64V(int index) {
      return u64V_.getLong(index);
    }
    /**
     * <code>repeated uint64 u64v = 13;</code>
     * @param index The index to set the value at.
     * @param value The u64v to set.
     * @return This builder for chaining.
     */
    public Builder setU64V(
        int index, long value) {

      ensureU64VIsMutable();
      u64V_.setLong(index, value);
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated uint64 u64v = 13;</code>
     * @param value The u64v to add.
     * @return This builder for chaining.
     */
    public Builder addU64V(long value) {

      ensureU64VIsMutable();
      u64V_.addLong(value);
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated uint64 u64v = 13;</code>
     * @param values The u64v to add.
     * @return This builder for chaining.
     */
    public Builder addAllU64V(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureU64VIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, u64V_);
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated uint64 u64v = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearU64V() {
      u64V_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00001000);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringArrayList strv_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureStrvIsMutable() {
      if (!strv_.isModifiable()) {
        strv_ = new com.google.protobuf.LazyStringArrayList(strv_);
      }
      bitField0_ |= 0x00002000;
    }
    /**
     * <code>repeated string strv = 14;</code>
     * @return A list containing the strv.
     */
    public com.google.protobuf.ProtocolStringList
        getStrvList() {
      strv_.makeImmutable();
      return strv_;
    }
    /**
     * <code>repeated string strv = 14;</code>
     * @return The count of strv.
     */
    public int getStrvCount() {
      return strv_.size();
    }
    /**
     * <code>repeated string strv = 14;</code>
     * @param index The index of the element to return.
     * @return The strv at the given index.
     */
    public java.lang.String getStrv(int index) {
      return strv_.get(index);
    }
    /**
     * <code>repeated string strv = 14;</code>
     * @param index The index of the value to return.
     * @return The bytes of the strv at the given index.
     */
    public com.google.protobuf.ByteString
        getStrvBytes(int index) {
      return strv_.getByteString(index);
    }
    /**
     * <code>repeated string strv = 14;</code>
     * @param index The index to set the value at.
     * @param value The strv to set.
     * @return This builder for chaining.
     */
    public Builder setStrv(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureStrvIsMutable();
      strv_.set(index, value);
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated string strv = 14;</code>
     * @param value The strv to add.
     * @return This builder for chaining.
     */
    public Builder addStrv(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureStrvIsMutable();
      strv_.add(value);
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated string strv = 14;</code>
     * @param values The strv to add.
     * @return This builder for chaining.
     */
    public Builder addAllStrv(
        java.lang.Iterable<java.lang.String> values) {
      ensureStrvIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, strv_);
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated string strv = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearStrv() {
      strv_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00002000);;
      onChanged();
      return this;
    }
    /**
     * <code>repeated string strv = 14;</code>
     * @param value The bytes of the strv to add.
     * @return This builder for chaining.
     */
    public Builder addStrvBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureStrvIsMutable();
      strv_.add(value);
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> datav_ = emptyList(com.google.protobuf.ByteString.class);
    private void ensureDatavIsMutable() {
      if (!datav_.isModifiable()) {
        datav_ = makeMutableCopy(datav_);
      }
      bitField0_ |= 0x00004000;
    }
    /**
     * <code>repeated bytes datav = 15;</code>
     * @return A list containing the datav.
     */
    public java.util.List<com.google.protobuf.ByteString>
        getDatavList() {
      datav_.makeImmutable();
      return datav_;
    }
    /**
     * <code>repeated bytes datav = 15;</code>
     * @return The count of datav.
     */
    public int getDatavCount() {
      return datav_.size();
    }
    /**
     * <code>repeated bytes datav = 15;</code>
     * @param index The index of the element to return.
     * @return The datav at the given index.
     */
    public com.google.protobuf.ByteString getDatav(int index) {
      return datav_.get(index);
    }
    /**
     * <code>repeated bytes datav = 15;</code>
     * @param index The index to set the value at.
     * @param value The datav to set.
     * @return This builder for chaining.
     */
    public Builder setDatav(
        int index, com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      ensureDatavIsMutable();
      datav_.set(index, value);
      bitField0_ |= 0x00004000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated bytes datav = 15;</code>
     * @param value The datav to add.
     * @return This builder for chaining.
     */
    public Builder addDatav(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      ensureDatavIsMutable();
      datav_.add(value);
      bitField0_ |= 0x00004000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated bytes datav = 15;</code>
     * @param values The datav to add.
     * @return This builder for chaining.
     */
    public Builder addAllDatav(
        java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
      ensureDatavIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, datav_);
      bitField0_ |= 0x00004000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated bytes datav = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearDatav() {
      datav_ = emptyList(com.google.protobuf.ByteString.class);
      bitField0_ = (bitField0_ & ~0x00004000);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList f32V_ = emptyFloatList();
    private void ensureF32VIsMutable() {
      if (!f32V_.isModifiable()) {
        f32V_ = makeMutableCopy(f32V_);
      }
      bitField0_ |= 0x00008000;
    }
    private void ensureF32VIsMutable(int capacity) {
      if (!f32V_.isModifiable()) {
        f32V_ = makeMutableCopy(f32V_, capacity);
      }
      bitField0_ |= 0x00008000;
    }
    /**
     * <code>repeated float f32v = 16;</code>
     * @return A list containing the f32v.
     */
    public java.util.List<java.lang.Float>
        getF32VList() {
      f32V_.makeImmutable();
      return f32V_;
    }
    /**
     * <code>repeated float f32v = 16;</code>
     * @return The count of f32v.
     */
    public int getF32VCount() {
      return f32V_.size();
    }
    /**
     * <code>repeated float f32v = 16;</code>
     * @param index The index of the element to return.
     * @return The f32v at the given index.
     */
    public float getF32V(int index) {
      return f32V_.getFloat(index);
    }
    /**
     * <code>repeated float f32v = 16;</code>
     * @param index The index to set the value at.
     * @param value The f32v to set.
     * @return This builder for chaining.
     */
    public Builder setF32V(
        int index, float value) {

      ensureF32VIsMutable();
      f32V_.setFloat(index, value);
      bitField0_ |= 0x00008000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated float f32v = 16;</code>
     * @param value The f32v to add.
     * @return This builder for chaining.
     */
    public Builder addF32V(float value) {

      ensureF32VIsMutable();
      f32V_.addFloat(value);
      bitField0_ |= 0x00008000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated float f32v = 16;</code>
     * @param values The f32v to add.
     * @return This builder for chaining.
     */
    public Builder addAllF32V(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureF32VIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, f32V_);
      bitField0_ |= 0x00008000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated float f32v = 16;</code>
     * @return This builder for chaining.
     */
    public Builder clearF32V() {
      f32V_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00008000);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.DoubleList f64V_ = emptyDoubleList();
    private void ensureF64VIsMutable() {
      if (!f64V_.isModifiable()) {
        f64V_ = makeMutableCopy(f64V_);
      }
      bitField0_ |= 0x00010000;
    }
    private void ensureF64VIsMutable(int capacity) {
      if (!f64V_.isModifiable()) {
        f64V_ = makeMutableCopy(f64V_, capacity);
      }
      bitField0_ |= 0x00010000;
    }
    /**
     * <code>repeated double f64v = 17;</code>
     * @return A list containing the f64v.
     */
    public java.util.List<java.lang.Double>
        getF64VList() {
      f64V_.makeImmutable();
      return f64V_;
    }
    /**
     * <code>repeated double f64v = 17;</code>
     * @return The count of f64v.
     */
    public int getF64VCount() {
      return f64V_.size();
    }
    /**
     * <code>repeated double f64v = 17;</code>
     * @param index The index of the element to return.
     * @return The f64v at the given index.
     */
    public double getF64V(int index) {
      return f64V_.getDouble(index);
    }
    /**
     * <code>repeated double f64v = 17;</code>
     * @param index The index to set the value at.
     * @param value The f64v to set.
     * @return This builder for chaining.
     */
    public Builder setF64V(
        int index, double value) {

      ensureF64VIsMutable();
      f64V_.setDouble(index, value);
      bitField0_ |= 0x00010000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double f64v = 17;</code>
     * @param value The f64v to add.
     * @return This builder for chaining.
     */
    public Builder addF64V(double value) {

      ensureF64VIsMutable();
      f64V_.addDouble(value);
      bitField0_ |= 0x00010000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double f64v = 17;</code>
     * @param values The f64v to add.
     * @return This builder for chaining.
     */
    public Builder addAllF64V(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureF64VIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, f64V_);
      bitField0_ |= 0x00010000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double f64v = 17;</code>
     * @return This builder for chaining.
     */
    public Builder clearF64V() {
      f64V_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00010000);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.BooleanList flags_ = emptyBooleanList();
    private void ensureFlagsIsMutable() {
      if (!flags_.isModifiable()) {
        flags_ = makeMutableCopy(flags_);
      }
      bitField0_ |= 0x00020000;
    }
    private void ensureFlagsIsMutable(int capacity) {
      if (!flags_.isModifiable()) {
        flags_ = makeMutableCopy(flags_, capacity);
      }
      bitField0_ |= 0x00020000;
    }
    /**
     * <code>repeated bool flags = 18;</code>
     * @return A list containing the flags.
     */
    public java.util.List<java.lang.Boolean>
        getFlagsList() {
      flags_.makeImmutable();
      return flags_;
    }
    /**
     * <code>repeated bool flags = 18;</code>
     * @return The count of flags.
     */
    public int getFlagsCount() {
      return flags_.size();
    }
    /**
     * <code>repeated bool flags = 18;</code>
     * @param index The index of the element to return.
     * @return The flags at the given index.
     */
    public boolean getFlags(int index) {
      return flags_.getBoolean(index);
    }
    /**
     * <code>repeated bool flags = 18;</code>
     * @param index The index to set the value at.
     * @param value The flags to set.
     * @return This builder for chaining.
     */
    public Builder setFlags(
        int index, boolean value) {

      ensureFlagsIsMutable();
      flags_.setBoolean(index, value);
      bitField0_ |= 0x00020000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated bool flags = 18;</code>
     * @param value The flags to add.
     * @return This builder for chaining.
     */
    public Builder addFlags(boolean value) {

      ensureFlagsIsMutable();
      flags_.addBoolean(value);
      bitField0_ |= 0x00020000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated bool flags = 18;</code>
     * @param values The flags to add.
     * @return This builder for chaining.
     */
    public Builder addAllFlags(
        java.lang.Iterable<? extends java.lang.Boolean> values) {
      ensureFlagsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, flags_);
      bitField0_ |= 0x00020000;
      onChanged();
      return this;
    }
    /**
     * <code>repeated bool flags = 18;</code>
     * @return This builder for chaining.
     */
    public Builder clearFlags() {
      flags_ = emptyBooleanList();
      bitField0_ = (bitField0_ & ~0x00020000);
      onChanged();
      return this;
    }

    private java.util.List<com.github.peterrk.protocache.pb.Small> objectv_ =
      java.util.Collections.emptyList();
    private void ensureObjectvIsMutable() {
      if (!((bitField0_ & 0x00040000) != 0)) {
        objectv_ = new java.util.ArrayList<com.github.peterrk.protocache.pb.Small>(objectv_);
        bitField0_ |= 0x00040000;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        com.github.peterrk.protocache.pb.Small, com.github.peterrk.protocache.pb.Small.Builder, com.github.peterrk.protocache.pb.SmallOrBuilder> objectvBuilder_;

    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public java.util.List<com.github.peterrk.protocache.pb.Small> getObjectvList() {
      if (objectvBuilder_ == null) {
        return java.util.Collections.unmodifiableList(objectv_);
      } else {
        return objectvBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public int getObjectvCount() {
      if (objectvBuilder_ == null) {
        return objectv_.size();
      } else {
        return objectvBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public com.github.peterrk.protocache.pb.Small getObjectv(int index) {
      if (objectvBuilder_ == null) {
        return objectv_.get(index);
      } else {
        return objectvBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public Builder setObjectv(
        int index, com.github.peterrk.protocache.pb.Small value) {
      if (objectvBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureObjectvIsMutable();
        objectv_.set(index, value);
        onChanged();
      } else {
        objectvBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public Builder setObjectv(
        int index, com.github.peterrk.protocache.pb.Small.Builder builderForValue) {
      if (objectvBuilder_ == null) {
        ensureObjectvIsMutable();
        objectv_.set(index, builderForValue.build());
        onChanged();
      } else {
        objectvBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public Builder addObjectv(com.github.peterrk.protocache.pb.Small value) {
      if (objectvBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureObjectvIsMutable();
        objectv_.add(value);
        onChanged();
      } else {
        objectvBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public Builder addObjectv(
        int index, com.github.peterrk.protocache.pb.Small value) {
      if (objectvBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureObjectvIsMutable();
        objectv_.add(index, value);
        onChanged();
      } else {
        objectvBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public Builder addObjectv(
        com.github.peterrk.protocache.pb.Small.Builder builderForValue) {
      if (objectvBuilder_ == null) {
        ensureObjectvIsMutable();
        objectv_.add(builderForValue.build());
        onChanged();
      } else {
        objectvBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public Builder addObjectv(
        int index, com.github.peterrk.protocache.pb.Small.Builder builderForValue) {
      if (objectvBuilder_ == null) {
        ensureObjectvIsMutable();
        objectv_.add(index, builderForValue.build());
        onChanged();
      } else {
        objectvBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public Builder addAllObjectv(
        java.lang.Iterable<? extends com.github.peterrk.protocache.pb.Small> values) {
      if (objectvBuilder_ == null) {
        ensureObjectvIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, objectv_);
        onChanged();
      } else {
        objectvBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public Builder clearObjectv() {
      if (objectvBuilder_ == null) {
        objectv_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
      } else {
        objectvBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public Builder removeObjectv(int index) {
      if (objectvBuilder_ == null) {
        ensureObjectvIsMutable();
        objectv_.remove(index);
        onChanged();
      } else {
        objectvBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public com.github.peterrk.protocache.pb.Small.Builder getObjectvBuilder(
        int index) {
      return internalGetObjectvFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public com.github.peterrk.protocache.pb.SmallOrBuilder getObjectvOrBuilder(
        int index) {
      if (objectvBuilder_ == null) {
        return objectv_.get(index);  } else {
        return objectvBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public java.util.List<? extends com.github.peterrk.protocache.pb.SmallOrBuilder> 
         getObjectvOrBuilderList() {
      if (objectvBuilder_ != null) {
        return objectvBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(objectv_);
      }
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public com.github.peterrk.protocache.pb.Small.Builder addObjectvBuilder() {
      return internalGetObjectvFieldBuilder().addBuilder(
          com.github.peterrk.protocache.pb.Small.getDefaultInstance());
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public com.github.peterrk.protocache.pb.Small.Builder addObjectvBuilder(
        int index) {
      return internalGetObjectvFieldBuilder().addBuilder(
          index, com.github.peterrk.protocache.pb.Small.getDefaultInstance());
    }
    /**
     * <code>repeated .test.Small objectv = 19;</code>
     */
    public java.util.List<com.github.peterrk.protocache.pb.Small.Builder> 
         getObjectvBuilderList() {
      return internalGetObjectvFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        com.github.peterrk.protocache.pb.Small, com.github.peterrk.protocache.pb.Small.Builder, com.github.peterrk.protocache.pb.SmallOrBuilder> 
        internalGetObjectvFieldBuilder() {
      if (objectvBuilder_ == null) {
        objectvBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            com.github.peterrk.protocache.pb.Small, com.github.peterrk.protocache.pb.Small.Builder, com.github.peterrk.protocache.pb.SmallOrBuilder>(
                objectv_,
                ((bitField0_ & 0x00040000) != 0),
                getParentForChildren(),
                isClean());
        objectv_ = null;
      }
      return objectvBuilder_;
    }

    private int tU32_ ;
    /**
     * <code>fixed32 t_u32 = 20;</code>
     * @return The tU32.
     */
    @java.lang.Override
    public int getTU32() {
      return tU32_;
    }
    /**
     * <code>fixed32 t_u32 = 20;</code>
     * @param value The tU32 to set.
     * @return This builder for chaining.
     */
    public Builder setTU32(int value) {

      tU32_ = value;
      bitField0_ |= 0x00080000;
      onChanged();
      return this;
    }
    /**
     * <code>fixed32 t_u32 = 20;</code>
     * @return This builder for chaining.
     */
    public Builder clearTU32() {
      bitField0_ = (bitField0_ & ~0x00080000);
      tU32_ = 0;
      onChanged();
      return this;
    }

    private int tI32_ ;
    /**
     * <code>sfixed32 t_i32 = 21;</code>
     * @return The tI32.
     */
    @java.lang.Override
    public int getTI32() {
      return tI32_;
    }
    /**
     * <code>sfixed32 t_i32 = 21;</code>
     * @param value The tI32 to set.
     * @return This builder for chaining.
     */
    public Builder setTI32(int value) {

      tI32_ = value;
      bitField0_ |= 0x00100000;
      onChanged();
      return this;
    }
    /**
     * <code>sfixed32 t_i32 = 21;</code>
     * @return This builder for chaining.
     */
    public Builder clearTI32() {
      bitField0_ = (bitField0_ & ~0x00100000);
      tI32_ = 0;
      onChanged();
      return this;
    }

    private int tS32_ ;
    /**
     * <code>sint32 t_s32 = 22;</code>
     * @return The tS32.
     */
    @java.lang.Override
    public int getTS32() {
      return tS32_;
    }
    /**
     * <code>sint32 t_s32 = 22;</code>
     * @param value The tS32 to set.
     * @return This builder for chaining.
     */
    public Builder setTS32(int value) {

      tS32_ = value;
      bitField0_ |= 0x00200000;
      onChanged();
      return this;
    }
    /**
     * <code>sint32 t_s32 = 22;</code>
     * @return This builder for chaining.
     */
    public Builder clearTS32() {
      bitField0_ = (bitField0_ & ~0x00200000);
      tS32_ = 0;
      onChanged();
      return this;
    }

    private long tU64_ ;
    /**
     * <code>fixed64 t_u64 = 23;</code>
     * @return The tU64.
     */
    @java.lang.Override
    public long getTU64() {
      return tU64_;
    }
    /**
     * <code>fixed64 t_u64 = 23;</code>
     * @param value The tU64 to set.
     * @return This builder for chaining.
     */
    public Builder setTU64(long value) {

      tU64_ = value;
      bitField0_ |= 0x00400000;
      onChanged();
      return this;
    }
    /**
     * <code>fixed64 t_u64 = 23;</code>
     * @return This builder for chaining.
     */
    public Builder clearTU64() {
      bitField0_ = (bitField0_ & ~0x00400000);
      tU64_ = 0L;
      onChanged();
      return this;
    }

    private long tI64_ ;
    /**
     * <code>sfixed64 t_i64 = 24;</code>
     * @return The tI64.
     */
    @java.lang.Override
    public long getTI64() {
      return tI64_;
    }
    /**
     * <code>sfixed64 t_i64 = 24;</code>
     * @param value The tI64 to set.
     * @return This builder for chaining.
     */
    public Builder setTI64(long value) {

      tI64_ = value;
      bitField0_ |= 0x00800000;
      onChanged();
      return this;
    }
    /**
     * <code>sfixed64 t_i64 = 24;</code>
     * @return This builder for chaining.
     */
    public Builder clearTI64() {
      bitField0_ = (bitField0_ & ~0x00800000);
      tI64_ = 0L;
      onChanged();
      return this;
    }

    private long tS64_ ;
    /**
     * <code>sint64 t_s64 = 25;</code>
     * @return The tS64.
     */
    @java.lang.Override
    public long getTS64() {
      return tS64_;
    }
    /**
     * <code>sint64 t_s64 = 25;</code>
     * @param value The tS64 to set.
     * @return This builder for chaining.
     */
    public Builder setTS64(long value) {

      tS64_ = value;
      bitField0_ |= 0x01000000;
      onChanged();
      return this;
    }
    /**
     * <code>sint64 t_s64 = 25;</code>
     * @return This builder for chaining.
     */
    public Builder clearTS64() {
      bitField0_ = (bitField0_ & ~0x01000000);
      tS64_ = 0L;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> index_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
        internalGetIndex() {
      if (index_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            IndexDefaultEntryHolder.defaultEntry);
      }
      return index_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
        internalGetMutableIndex() {
      if (index_ == null) {
        index_ = com.google.protobuf.MapField.newMapField(
            IndexDefaultEntryHolder.defaultEntry);
      }
      if (!index_.isMutable()) {
        index_ = index_.copy();
      }
      bitField0_ |= 0x02000000;
      onChanged();
      return index_;
    }
    public int getIndexCount() {
      return internalGetIndex().getMap().size();
    }
    /**
     * <code>map&lt;string, int32&gt; index = 26;</code>
     */
    @java.lang.Override
    public boolean containsIndex(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetIndex().getMap().containsKey(key);
    }
    /**
     * Use {@link #getIndexMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getIndex() {
      return getIndexMap();
    }
    /**
     * <code>map&lt;string, int32&gt; index = 26;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.Integer> getIndexMap() {
      return internalGetIndex().getMap();
    }
    /**
     * <code>map&lt;string, int32&gt; index = 26;</code>
     */
    @java.lang.Override
    public int getIndexOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetIndex().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, int32&gt; index = 26;</code>
     */
    @java.lang.Override
    public int getIndexOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetIndex().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearIndex() {
      bitField0_ = (bitField0_ & ~0x02000000);
      internalGetMutableIndex().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, int32&gt; index = 26;</code>
     */
    public Builder removeIndex(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableIndex().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer>
        getMutableIndex() {
      bitField0_ |= 0x02000000;
      return internalGetMutableIndex().getMutableMap();
    }
    /**
     * <code>map&lt;string, int32&gt; index = 26;</code>
     */
    public Builder putIndex(
        java.lang.String key,
        int value) {
      if (key == null) { throw new NullPointerException("map key"); }

      internalGetMutableIndex().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x02000000;
      return this;
    }
    /**
     * <code>map&lt;string, int32&gt; index = 26;</code>
     */
    public Builder putAllIndex(
        java.util.Map<java.lang.String, java.lang.Integer> values) {
      internalGetMutableIndex().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x02000000;
      return this;
    }

    private static final class ObjectsConverter implements com.google.protobuf.MapFieldBuilder.Converter<java.lang.Integer, com.github.peterrk.protocache.pb.SmallOrBuilder, com.github.peterrk.protocache.pb.Small> {
      @java.lang.Override
      public com.github.peterrk.protocache.pb.Small build(com.github.peterrk.protocache.pb.SmallOrBuilder val) {
        if (val instanceof com.github.peterrk.protocache.pb.Small) { return (com.github.peterrk.protocache.pb.Small) val; }
        return ((com.github.peterrk.protocache.pb.Small.Builder) val).build();
      }

      @java.lang.Override
      public com.google.protobuf.MapEntry<java.lang.Integer, com.github.peterrk.protocache.pb.Small> defaultEntry() {
        return ObjectsDefaultEntryHolder.defaultEntry;
      }
    };
    private static final ObjectsConverter objectsConverter = new ObjectsConverter();

    private com.google.protobuf.MapFieldBuilder<
        java.lang.Integer, com.github.peterrk.protocache.pb.SmallOrBuilder, com.github.peterrk.protocache.pb.Small, com.github.peterrk.protocache.pb.Small.Builder> objects_;
    private com.google.protobuf.MapFieldBuilder<java.lang.Integer, com.github.peterrk.protocache.pb.SmallOrBuilder, com.github.peterrk.protocache.pb.Small, com.github.peterrk.protocache.pb.Small.Builder>
        internalGetObjects() {
      if (objects_ == null) {
        return new com.google.protobuf.MapFieldBuilder<>(objectsConverter);
      }
      return objects_;
    }
    private com.google.protobuf.MapFieldBuilder<java.lang.Integer, com.github.peterrk.protocache.pb.SmallOrBuilder, com.github.peterrk.protocache.pb.Small, com.github.peterrk.protocache.pb.Small.Builder>
        internalGetMutableObjects() {
      if (objects_ == null) {
        objects_ = new com.google.protobuf.MapFieldBuilder<>(objectsConverter);
      }
      bitField0_ |= 0x04000000;
      onChanged();
      return objects_;
    }
    public int getObjectsCount() {
      return internalGetObjects().ensureBuilderMap().size();
    }
    /**
     * <code>map&lt;int32, .test.Small&gt; objects = 27;</code>
     */
    @java.lang.Override
    public boolean containsObjects(
        int key) {

      return internalGetObjects().ensureBuilderMap().containsKey(key);
    }
    /**
     * Use {@link #getObjectsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.github.peterrk.protocache.pb.Small> getObjects() {
      return getObjectsMap();
    }
    /**
     * <code>map&lt;int32, .test.Small&gt; objects = 27;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.Integer, com.github.peterrk.protocache.pb.Small> getObjectsMap() {
      return internalGetObjects().getImmutableMap();
    }
    /**
     * <code>map&lt;int32, .test.Small&gt; objects = 27;</code>
     */
    @java.lang.Override
    public /* nullable */
com.github.peterrk.protocache.pb.Small getObjectsOrDefault(
        int key,
        /* nullable */
com.github.peterrk.protocache.pb.Small defaultValue) {

      java.util.Map<java.lang.Integer, com.github.peterrk.protocache.pb.SmallOrBuilder> map = internalGetMutableObjects().ensureBuilderMap();
      return map.containsKey(key) ? objectsConverter.build(map.get(key)) : defaultValue;
    }
    /**
     * <code>map&lt;int32, .test.Small&gt; objects = 27;</code>
     */
    @java.lang.Override
    public com.github.peterrk.protocache.pb.Small getObjectsOrThrow(
        int key) {

      java.util.Map<java.lang.Integer, com.github.peterrk.protocache.pb.SmallOrBuilder> map = internalGetMutableObjects().ensureBuilderMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return objectsConverter.build(map.get(key));
    }
    public Builder clearObjects() {
      bitField0_ = (bitField0_ & ~0x04000000);
      internalGetMutableObjects().clear();
      return this;
    }
    /**
     * <code>map&lt;int32, .test.Small&gt; objects = 27;</code>
     */
    public Builder removeObjects(
        int key) {

      internalGetMutableObjects().ensureBuilderMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.github.peterrk.protocache.pb.Small>
        getMutableObjects() {
      bitField0_ |= 0x04000000;
      return internalGetMutableObjects().ensureMessageMap();
    }
    /**
     * <code>map&lt;int32, .test.Small&gt; objects = 27;</code>
     */
    public Builder putObjects(
        int key,
        com.github.peterrk.protocache.pb.Small value) {

      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableObjects().ensureBuilderMap()
          .put(key, value);
      bitField0_ |= 0x04000000;
      return this;
    }
    /**
     * <code>map&lt;int32, .test.Small&gt; objects = 27;</code>
     */
    public Builder putAllObjects(
        java.util.Map<java.lang.Integer, com.github.peterrk.protocache.pb.Small> values) {
      for (java.util.Map.Entry<java.lang.Integer, com.github.peterrk.protocache.pb.Small> e : values.entrySet()) {
        if (e.getKey() == null || e.getValue() == null) {
          throw new NullPointerException();
        }
      }
      internalGetMutableObjects().ensureBuilderMap()
          .putAll(values);
      bitField0_ |= 0x04000000;
      return this;
    }
    /**
     * <code>map&lt;int32, .test.Small&gt; objects = 27;</code>
     */
    public com.github.peterrk.protocache.pb.Small.Builder putObjectsBuilderIfAbsent(
        int key) {
      java.util.Map<java.lang.Integer, com.github.peterrk.protocache.pb.SmallOrBuilder> builderMap = internalGetMutableObjects().ensureBuilderMap();
      com.github.peterrk.protocache.pb.SmallOrBuilder entry = builderMap.get(key);
      if (entry == null) {
        entry = com.github.peterrk.protocache.pb.Small.newBuilder();
        builderMap.put(key, entry);
      }
      if (entry instanceof com.github.peterrk.protocache.pb.Small) {
        entry = ((com.github.peterrk.protocache.pb.Small) entry).toBuilder();
        builderMap.put(key, entry);
      }
      return (com.github.peterrk.protocache.pb.Small.Builder) entry;
    }

    private com.github.peterrk.protocache.pb.Vec2D matrix_;
    private com.google.protobuf.SingleFieldBuilder<
        com.github.peterrk.protocache.pb.Vec2D, com.github.peterrk.protocache.pb.Vec2D.Builder, com.github.peterrk.protocache.pb.Vec2DOrBuilder> matrixBuilder_;
    /**
     * <code>.test.Vec2D matrix = 28;</code>
     * @return Whether the matrix field is set.
     */
    public boolean hasMatrix() {
      return ((bitField0_ & 0x08000000) != 0);
    }
    /**
     * <code>.test.Vec2D matrix = 28;</code>
     * @return The matrix.
     */
    public com.github.peterrk.protocache.pb.Vec2D getMatrix() {
      if (matrixBuilder_ == null) {
        return matrix_ == null ? com.github.peterrk.protocache.pb.Vec2D.getDefaultInstance() : matrix_;
      } else {
        return matrixBuilder_.getMessage();
      }
    }
    /**
     * <code>.test.Vec2D matrix = 28;</code>
     */
    public Builder setMatrix(com.github.peterrk.protocache.pb.Vec2D value) {
      if (matrixBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        matrix_ = value;
      } else {
        matrixBuilder_.setMessage(value);
      }
      bitField0_ |= 0x08000000;
      onChanged();
      return this;
    }
    /**
     * <code>.test.Vec2D matrix = 28;</code>
     */
    public Builder setMatrix(
        com.github.peterrk.protocache.pb.Vec2D.Builder builderForValue) {
      if (matrixBuilder_ == null) {
        matrix_ = builderForValue.build();
      } else {
        matrixBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x08000000;
      onChanged();
      return this;
    }
    /**
     * <code>.test.Vec2D matrix = 28;</code>
     */
    public Builder mergeMatrix(com.github.peterrk.protocache.pb.Vec2D value) {
      if (matrixBuilder_ == null) {
        if (((bitField0_ & 0x08000000) != 0) &&
          matrix_ != null &&
          matrix_ != com.github.peterrk.protocache.pb.Vec2D.getDefaultInstance()) {
          getMatrixBuilder().mergeFrom(value);
        } else {
          matrix_ = value;
        }
      } else {
        matrixBuilder_.mergeFrom(value);
      }
      if (matrix_ != null) {
        bitField0_ |= 0x08000000;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.test.Vec2D matrix = 28;</code>
     */
    public Builder clearMatrix() {
      bitField0_ = (bitField0_ & ~0x08000000);
      matrix_ = null;
      if (matrixBuilder_ != null) {
        matrixBuilder_.dispose();
        matrixBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.test.Vec2D matrix = 28;</code>
     */
    public com.github.peterrk.protocache.pb.Vec2D.Builder getMatrixBuilder() {
      bitField0_ |= 0x08000000;
      onChanged();
      return internalGetMatrixFieldBuilder().getBuilder();
    }
    /**
     * <code>.test.Vec2D matrix = 28;</code>
     */
    public com.github.peterrk.protocache.pb.Vec2DOrBuilder getMatrixOrBuilder() {
      if (matrixBuilder_ != null) {
        return matrixBuilder_.getMessageOrBuilder();
      } else {
        return matrix_ == null ?
            com.github.peterrk.protocache.pb.Vec2D.getDefaultInstance() : matrix_;
      }
    }
    /**
     * <code>.test.Vec2D matrix = 28;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.github.peterrk.protocache.pb.Vec2D, com.github.peterrk.protocache.pb.Vec2D.Builder, com.github.peterrk.protocache.pb.Vec2DOrBuilder> 
        internalGetMatrixFieldBuilder() {
      if (matrixBuilder_ == null) {
        matrixBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.github.peterrk.protocache.pb.Vec2D, com.github.peterrk.protocache.pb.Vec2D.Builder, com.github.peterrk.protocache.pb.Vec2DOrBuilder>(
                getMatrix(),
                getParentForChildren(),
                isClean());
        matrix_ = null;
      }
      return matrixBuilder_;
    }

    private java.util.List<com.github.peterrk.protocache.pb.ArrMap> vector_ =
      java.util.Collections.emptyList();
    private void ensureVectorIsMutable() {
      if (!((bitField0_ & 0x10000000) != 0)) {
        vector_ = new java.util.ArrayList<com.github.peterrk.protocache.pb.ArrMap>(vector_);
        bitField0_ |= 0x10000000;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        com.github.peterrk.protocache.pb.ArrMap, com.github.peterrk.protocache.pb.ArrMap.Builder, com.github.peterrk.protocache.pb.ArrMapOrBuilder> vectorBuilder_;

    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public java.util.List<com.github.peterrk.protocache.pb.ArrMap> getVectorList() {
      if (vectorBuilder_ == null) {
        return java.util.Collections.unmodifiableList(vector_);
      } else {
        return vectorBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public int getVectorCount() {
      if (vectorBuilder_ == null) {
        return vector_.size();
      } else {
        return vectorBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public com.github.peterrk.protocache.pb.ArrMap getVector(int index) {
      if (vectorBuilder_ == null) {
        return vector_.get(index);
      } else {
        return vectorBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public Builder setVector(
        int index, com.github.peterrk.protocache.pb.ArrMap value) {
      if (vectorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureVectorIsMutable();
        vector_.set(index, value);
        onChanged();
      } else {
        vectorBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public Builder setVector(
        int index, com.github.peterrk.protocache.pb.ArrMap.Builder builderForValue) {
      if (vectorBuilder_ == null) {
        ensureVectorIsMutable();
        vector_.set(index, builderForValue.build());
        onChanged();
      } else {
        vectorBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public Builder addVector(com.github.peterrk.protocache.pb.ArrMap value) {
      if (vectorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureVectorIsMutable();
        vector_.add(value);
        onChanged();
      } else {
        vectorBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public Builder addVector(
        int index, com.github.peterrk.protocache.pb.ArrMap value) {
      if (vectorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureVectorIsMutable();
        vector_.add(index, value);
        onChanged();
      } else {
        vectorBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public Builder addVector(
        com.github.peterrk.protocache.pb.ArrMap.Builder builderForValue) {
      if (vectorBuilder_ == null) {
        ensureVectorIsMutable();
        vector_.add(builderForValue.build());
        onChanged();
      } else {
        vectorBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public Builder addVector(
        int index, com.github.peterrk.protocache.pb.ArrMap.Builder builderForValue) {
      if (vectorBuilder_ == null) {
        ensureVectorIsMutable();
        vector_.add(index, builderForValue.build());
        onChanged();
      } else {
        vectorBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public Builder addAllVector(
        java.lang.Iterable<? extends com.github.peterrk.protocache.pb.ArrMap> values) {
      if (vectorBuilder_ == null) {
        ensureVectorIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, vector_);
        onChanged();
      } else {
        vectorBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public Builder clearVector() {
      if (vectorBuilder_ == null) {
        vector_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x10000000);
        onChanged();
      } else {
        vectorBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public Builder removeVector(int index) {
      if (vectorBuilder_ == null) {
        ensureVectorIsMutable();
        vector_.remove(index);
        onChanged();
      } else {
        vectorBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public com.github.peterrk.protocache.pb.ArrMap.Builder getVectorBuilder(
        int index) {
      return internalGetVectorFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public com.github.peterrk.protocache.pb.ArrMapOrBuilder getVectorOrBuilder(
        int index) {
      if (vectorBuilder_ == null) {
        return vector_.get(index);  } else {
        return vectorBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public java.util.List<? extends com.github.peterrk.protocache.pb.ArrMapOrBuilder> 
         getVectorOrBuilderList() {
      if (vectorBuilder_ != null) {
        return vectorBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(vector_);
      }
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public com.github.peterrk.protocache.pb.ArrMap.Builder addVectorBuilder() {
      return internalGetVectorFieldBuilder().addBuilder(
          com.github.peterrk.protocache.pb.ArrMap.getDefaultInstance());
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public com.github.peterrk.protocache.pb.ArrMap.Builder addVectorBuilder(
        int index) {
      return internalGetVectorFieldBuilder().addBuilder(
          index, com.github.peterrk.protocache.pb.ArrMap.getDefaultInstance());
    }
    /**
     * <code>repeated .test.ArrMap vector = 29;</code>
     */
    public java.util.List<com.github.peterrk.protocache.pb.ArrMap.Builder> 
         getVectorBuilderList() {
      return internalGetVectorFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        com.github.peterrk.protocache.pb.ArrMap, com.github.peterrk.protocache.pb.ArrMap.Builder, com.github.peterrk.protocache.pb.ArrMapOrBuilder> 
        internalGetVectorFieldBuilder() {
      if (vectorBuilder_ == null) {
        vectorBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            com.github.peterrk.protocache.pb.ArrMap, com.github.peterrk.protocache.pb.ArrMap.Builder, com.github.peterrk.protocache.pb.ArrMapOrBuilder>(
                vector_,
                ((bitField0_ & 0x10000000) != 0),
                getParentForChildren(),
                isClean());
        vector_ = null;
      }
      return vectorBuilder_;
    }

    private com.github.peterrk.protocache.pb.ArrMap arrays_;
    private com.google.protobuf.SingleFieldBuilder<
        com.github.peterrk.protocache.pb.ArrMap, com.github.peterrk.protocache.pb.ArrMap.Builder, com.github.peterrk.protocache.pb.ArrMapOrBuilder> arraysBuilder_;
    /**
     * <code>.test.ArrMap arrays = 30;</code>
     * @return Whether the arrays field is set.
     */
    public boolean hasArrays() {
      return ((bitField0_ & 0x20000000) != 0);
    }
    /**
     * <code>.test.ArrMap arrays = 30;</code>
     * @return The arrays.
     */
    public com.github.peterrk.protocache.pb.ArrMap getArrays() {
      if (arraysBuilder_ == null) {
        return arrays_ == null ? com.github.peterrk.protocache.pb.ArrMap.getDefaultInstance() : arrays_;
      } else {
        return arraysBuilder_.getMessage();
      }
    }
    /**
     * <code>.test.ArrMap arrays = 30;</code>
     */
    public Builder setArrays(com.github.peterrk.protocache.pb.ArrMap value) {
      if (arraysBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        arrays_ = value;
      } else {
        arraysBuilder_.setMessage(value);
      }
      bitField0_ |= 0x20000000;
      onChanged();
      return this;
    }
    /**
     * <code>.test.ArrMap arrays = 30;</code>
     */
    public Builder setArrays(
        com.github.peterrk.protocache.pb.ArrMap.Builder builderForValue) {
      if (arraysBuilder_ == null) {
        arrays_ = builderForValue.build();
      } else {
        arraysBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x20000000;
      onChanged();
      return this;
    }
    /**
     * <code>.test.ArrMap arrays = 30;</code>
     */
    public Builder mergeArrays(com.github.peterrk.protocache.pb.ArrMap value) {
      if (arraysBuilder_ == null) {
        if (((bitField0_ & 0x20000000) != 0) &&
          arrays_ != null &&
          arrays_ != com.github.peterrk.protocache.pb.ArrMap.getDefaultInstance()) {
          getArraysBuilder().mergeFrom(value);
        } else {
          arrays_ = value;
        }
      } else {
        arraysBuilder_.mergeFrom(value);
      }
      if (arrays_ != null) {
        bitField0_ |= 0x20000000;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.test.ArrMap arrays = 30;</code>
     */
    public Builder clearArrays() {
      bitField0_ = (bitField0_ & ~0x20000000);
      arrays_ = null;
      if (arraysBuilder_ != null) {
        arraysBuilder_.dispose();
        arraysBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.test.ArrMap arrays = 30;</code>
     */
    public com.github.peterrk.protocache.pb.ArrMap.Builder getArraysBuilder() {
      bitField0_ |= 0x20000000;
      onChanged();
      return internalGetArraysFieldBuilder().getBuilder();
    }
    /**
     * <code>.test.ArrMap arrays = 30;</code>
     */
    public com.github.peterrk.protocache.pb.ArrMapOrBuilder getArraysOrBuilder() {
      if (arraysBuilder_ != null) {
        return arraysBuilder_.getMessageOrBuilder();
      } else {
        return arrays_ == null ?
            com.github.peterrk.protocache.pb.ArrMap.getDefaultInstance() : arrays_;
      }
    }
    /**
     * <code>.test.ArrMap arrays = 30;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.github.peterrk.protocache.pb.ArrMap, com.github.peterrk.protocache.pb.ArrMap.Builder, com.github.peterrk.protocache.pb.ArrMapOrBuilder> 
        internalGetArraysFieldBuilder() {
      if (arraysBuilder_ == null) {
        arraysBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.github.peterrk.protocache.pb.ArrMap, com.github.peterrk.protocache.pb.ArrMap.Builder, com.github.peterrk.protocache.pb.ArrMapOrBuilder>(
                getArrays(),
                getParentForChildren(),
                isClean());
        arrays_ = null;
      }
      return arraysBuilder_;
    }

    private com.google.protobuf.Internal.IntList modev_ =
      emptyIntList();
    private void ensureModevIsMutable() {
      if (!((bitField0_ & 0x40000000) != 0)) {
        modev_ = makeMutableCopy(modev_);
        bitField0_ |= 0x40000000;
      }
    }
    /**
     * <code>repeated .test.Mode modev = 32;</code>
     * @return A list containing the modev.
     */
    public java.util.List<com.github.peterrk.protocache.pb.Mode> getModevList() {
      return new com.google.protobuf.Internal.IntListAdapter<
          com.github.peterrk.protocache.pb.Mode>(modev_, modev_converter_);
    }
    /**
     * <code>repeated .test.Mode modev = 32;</code>
     * @return The count of modev.
     */
    public int getModevCount() {
      return modev_.size();
    }
    /**
     * <code>repeated .test.Mode modev = 32;</code>
     * @param index The index of the element to return.
     * @return The modev at the given index.
     */
    public com.github.peterrk.protocache.pb.Mode getModev(int index) {
      return modev_converter_.convert(modev_.getInt(index));
    }
    /**
     * <code>repeated .test.Mode modev = 32;</code>
     * @param index The index to set the value at.
     * @param value The modev to set.
     * @return This builder for chaining.
     */
    public Builder setModev(
        int index, com.github.peterrk.protocache.pb.Mode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureModevIsMutable();
      modev_.setInt(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .test.Mode modev = 32;</code>
     * @param value The modev to add.
     * @return This builder for chaining.
     */
    public Builder addModev(com.github.peterrk.protocache.pb.Mode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureModevIsMutable();
      modev_.addInt(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .test.Mode modev = 32;</code>
     * @param values The modev to add.
     * @return This builder for chaining.
     */
    public Builder addAllModev(
        java.lang.Iterable<? extends com.github.peterrk.protocache.pb.Mode> values) {
      ensureModevIsMutable();
      for (com.github.peterrk.protocache.pb.Mode value : values) {
        modev_.addInt(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <code>repeated .test.Mode modev = 32;</code>
     * @return This builder for chaining.
     */
    public Builder clearModev() {
      modev_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x40000000);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .test.Mode modev = 32;</code>
     * @return A list containing the enum numeric values on the wire for modev.
     */
    public java.util.List<java.lang.Integer>
    getModevValueList() {
      return java.util.Collections.unmodifiableList(modev_);
    }
    /**
     * <code>repeated .test.Mode modev = 32;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of modev at the given index.
     */
    public int getModevValue(int index) {
      return modev_.getInt(index);
    }
    /**
     * <code>repeated .test.Mode modev = 32;</code>
     * @param index The index to set the value at.
     * @param value The enum numeric value on the wire for modev to set.
     * @return This builder for chaining.
     */
    public Builder setModevValue(
        int index, int value) {
      ensureModevIsMutable();
      modev_.setInt(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .test.Mode modev = 32;</code>
     * @param value The enum numeric value on the wire for modev to add.
     * @return This builder for chaining.
     */
    public Builder addModevValue(int value) {
      ensureModevIsMutable();
      modev_.addInt(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .test.Mode modev = 32;</code>
     * @param values The enum numeric values on the wire for modev to add.
     * @return This builder for chaining.
     */
    public Builder addAllModevValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureModevIsMutable();
      for (int value : values) {
        modev_.addInt(value);
      }
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:test.Main)
  }

  // @@protoc_insertion_point(class_scope:test.Main)
  private static final com.github.peterrk.protocache.pb.Main DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.peterrk.protocache.pb.Main();
  }

  public static com.github.peterrk.protocache.pb.Main getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Main>
      PARSER = new com.google.protobuf.AbstractParser<Main>() {
    @java.lang.Override
    public Main parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Main> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Main> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.peterrk.protocache.pb.Main getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

